import type { BoxSelectionOption } from '../composables/mouse/boxSelection';
import type { Configs } from '../common/configs';
import type { RecursivePartial } from '../common/common';
import type { DefineComponent, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, PropType as __PropType } from 'vue';
import type { Node, Edge, Path, EventHandlers,  Nodes,  Edges,  InputPaths,  Layouts } from '../common/types';
import { Layers, Point, Sizes } from '../common/types';
import { Box } from '../modules/svg-pan-zoom-ex';
import { ExportOptions } from '../utils/svg';
declare const _sfc_main: DefineComponent<{
    nodes: {
        type: __PropType<Nodes | undefined>;
        required: false;
        default: () => {};
    };
    edges: {
        type: __PropType<Edges | undefined>;
        required: false;
        default: () => {};
    };
    paths: {
        type: __PropType<InputPaths | undefined>;
        required: false;
        default: () => {};
    };
    layouts: {
        type: __PropType<RecursivePartial<Layouts> | undefined>;
        required: false;
        default: () => {};
    };
    zoomLevel: {
        type: __PropType<number | undefined>;
        required: false;
        default: number;
    };
    selectedNodes: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    selectedEdges: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    selectedPaths: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    configs: {
        type: __PropType<RecursivePartial<Configs<Node, Edge, Path>> | undefined>;
        required: false;
        default: () => {};
    };
    layers: {
        type: __PropType<Layers | undefined>;
        required: false;
        default: () => {};
    };
    eventHandlers: {
        type: __PropType<EventHandlers | undefined>;
        required: false;
        default: () => {};
    };
}, {
    fitToContents: () => void;
    panToCenter: () => void;
    getViewBox: () => Box;
    setViewBox: (box: Box) => void | undefined;
    transitionWhile: (func: () => void | Promise<void>, duration?: number, timingFunction?: string) => void;
    startBoxSelection: (options?: Partial<BoxSelectionOption> | undefined) => void;
    stopBoxSelection: () => void;
    zoomIn: () => void;
    zoomOut: () => void;
    panTo: (point: Point) => void;
    panBy: (point: Point) => void;
    getPan: () => Point;
    getSizes: () => Sizes;
    translateFromDomToSvgCoordinates: (coordinates: Point) => Point;
    translateFromSvgToDomCoordinates: (coordinates: Point) => Point;
    getAsSvg: () => string;
    exportAsSvgText: (options?: Partial<ExportOptions>) => Promise<string>;
    exportAsSvgElement: (options?: Partial<ExportOptions>) => Promise<SVGElement>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:selectedPaths" | "update:layouts")[], "update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:selectedPaths" | "update:layouts", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    nodes: {
        type: __PropType<Nodes | undefined>;
        required: false;
        default: () => {};
    };
    edges: {
        type: __PropType<Edges | undefined>;
        required: false;
        default: () => {};
    };
    paths: {
        type: __PropType<InputPaths | undefined>;
        required: false;
        default: () => {};
    };
    layouts: {
        type: __PropType<RecursivePartial<Layouts> | undefined>;
        required: false;
        default: () => {};
    };
    zoomLevel: {
        type: __PropType<number | undefined>;
        required: false;
        default: number;
    };
    selectedNodes: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    selectedEdges: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    selectedPaths: {
        type: __PropType<string[] | undefined>;
        required: false;
        default: () => never[];
    };
    configs: {
        type: __PropType<RecursivePartial<Configs<Node, Edge, Path>> | undefined>;
        required: false;
        default: () => {};
    };
    layers: {
        type: __PropType<Layers | undefined>;
        required: false;
        default: () => {};
    };
    eventHandlers: {
        type: __PropType<EventHandlers | undefined>;
        required: false;
        default: () => {};
    };
}>> & {
    "onUpdate:zoomLevel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedNodes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedEdges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedPaths"?: ((...args: any[]) => any) | undefined;
    "onUpdate:layouts"?: ((...args: any[]) => any) | undefined;
}, {
    nodes: Nodes | undefined;
    edges: Edges | undefined;
    paths: InputPaths | undefined;
    layouts: RecursivePartial<Layouts> | undefined;
    zoomLevel: number | undefined;
    selectedNodes: string[] | undefined;
    selectedEdges: string[] | undefined;
    selectedPaths: string[] | undefined;
    configs: RecursivePartial<Configs<Node, Edge, Path>> | undefined;
    layers: Layers | undefined;
    eventHandlers: EventHandlers | undefined;
}>;
export default _sfc_main;
