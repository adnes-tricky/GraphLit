{"ast":null,"code":"import axios from 'axios';\nimport NetworkGraph from '../components/NetworkGraphView.vue';\nimport Pagination from 'vue-pagination-2';\nexport default {\n  name: 'searchWord',\n  components: {\n    NetworkGraph,\n    Pagination\n  },\n  data() {\n    return {\n      response: '',\n      category: false,\n      keyword: false,\n      searchword: '',\n      resTable: [],\n      nodeList: {},\n      edgeList: {},\n      currentPage: 1,\n      perPage: 10\n    };\n  },\n  computed: {\n    totalItems() {\n      return this.resTable.length;\n    },\n    displayedItems() {\n      const startIndex = (this.currentPage - 1) * this.perPage;\n      const endIndex = startIndex + this.perPage;\n      return this.resTable.slice(startIndex, endIndex);\n    }\n  },\n  methods: {\n    async submitForm() {\n      var res = [];\n      this.nodeList = {};\n      this.edgeList = {};\n      this.resTable = [];\n      try {\n        const response = await axios.post('api/searchGraphKeyword', {\n          searchword: this.searchword,\n          category: this.category,\n          keyword: this.keyword\n        });\n        if (response.status == 200) {\n          res = response.data;\n        }\n      } catch (error) {\n        console.log(error);\n      }\n      // Reset form fields\n      this.searchword = '';\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n      this.resTable = this.resTable.concat(res);\n      const nodes = {};\n      const edges = {};\n      this.resTable.forEach((item, index) => {\n        // Create a new node if it doesn't already exist\n        if (!nodes[item.imagename]) {\n          nodes[item.imagename] = {\n            name: item.imagename,\n            type: 'image',\n            color: '#ff0000'\n          };\n        }\n        if (!nodes[item.searchword]) {\n          nodes[item.searchword] = {\n            name: item.searchword,\n            type: 'linkword',\n            color: '#4466cc'\n          };\n        }\n\n        // Create a new edge if it doesn't already exist\n        const source = item.searchword;\n        const target = item.imagename;\n        const edgeId = `edge${index + 1}`;\n        if (!edges[edgeId]) {\n          edges[edgeId] = {\n            source,\n            target\n          };\n        }\n      });\n\n      // Update state with new node and edge lists\n      this.nodeList = nodes;\n      this.edgeList = edges;\n      this.currentPage = 1; // reset current page to 1 after each search\n    },\n\n    pageChanged(page) {\n      this.currentPage = page;\n    }\n  },\n  computed: {\n    totalItemsCount() {\n      return this.resTable.length;\n    },\n    displayedItems() {\n      const startIndex = (this.currentPage - 1) * this.perPage;\n      const endIndex = startIndex + this.perPage;\n      return this.resTable.slice(startIndex, endIndex);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","NetworkGraph","Pagination","name","components","data","response","category","keyword","searchword","resTable","nodeList","edgeList","currentPage","perPage","computed","totalItems","length","displayedItems","startIndex","endIndex","slice","methods","submitForm","res","post","status","error","console","log","$refs","form","reset","concat","nodes","edges","forEach","item","index","imagename","type","color","source","target","edgeId","pageChanged","page","totalItemsCount"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchword\"\r\n          id=\"searchword\"\r\n          v-model=\"searchword\"\r\n          placeholder=\"Searchword\"\r\n          required\r\n        />\r\n        <label>\r\n          <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\" />\r\n          Category\r\n        </label>\r\n        <label>\r\n          <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n          Keyword\r\n        </label>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\" />\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Search Word</th>\r\n              <th>Image Name</th>\r\n              <th>Created Date</th>\r\n              <th>Category</th>\r\n              <th>Keywords</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(item, index) in displayedItems\" :key=\"index\">\r\n              <td>{{ item.searchword }}</td>\r\n              <td>{{ item.imagename }}</td>\r\n              <td>{{ item.created_date }}</td>\r\n              <td>{{ item.category }}</td>\r\n              <td>{{ item.keywords }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <pagination\r\n        v-if=\"resTable.length > 0\"\r\n        :value=\"currentPage\"\r\n        :records=\"totalItems\"\r\n        :per-page=\"perPage\"\r\n        @page-changed=\"pageChanged\"\r\n        />\r\n        <div v-if=\"totalItems > 0\">\r\n        <button @click=\"currentPage = 1\" :disabled=\"currentPage === 1\">First</button>\r\n        <button @click=\"currentPage--\" :disabled=\"currentPage === 1\">Prev</button>\r\n        <button @click=\"currentPage++\" :disabled=\"currentPage === totalPages\">Next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport NetworkGraph from '../components/NetworkGraphView.vue';\r\nimport Pagination from 'vue-pagination-2';\r\n\r\nexport default {\r\n  name: 'searchWord',\r\n  components: {\r\n    NetworkGraph,\r\n    Pagination,\r\n  },\r\n  data() {\r\n    return {\r\n      response: '',\r\n      category: false,\r\n      keyword: false,\r\n      searchword: '',\r\n      resTable: [],\r\n      nodeList: {},\r\n      edgeList: {},\r\n      currentPage: 1,\r\n      perPage: 10,\r\n    };\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.resTable.length;\r\n    },\r\n    displayedItems() {\r\n      const startIndex = (this.currentPage - 1) * this.perPage;\r\n      const endIndex = startIndex + this.perPage;\r\n      return this.resTable.slice(startIndex, endIndex);\r\n    },\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n        var res = [];\r\n        this.nodeList = {};\r\n        this.edgeList = {};\r\n        this.resTable = [];\r\n        try {\r\n        const response = await axios.post('api/searchGraphKeyword', {\r\n            searchword: this.searchword,\r\n            category: this.category,\r\n            keyword: this.keyword,\r\n        });\r\n        if (response.status == 200) {\r\n            res = response.data;\r\n        }\r\n        } catch (error) {\r\n        console.log(error);\r\n        }\r\n        // Reset form fields\r\n        this.searchword = '';\r\n        this.category = false;\r\n        this.keyword = false;\r\n        this.$refs.form.reset();\r\n        // clear the input values for the form data fields\r\n        this.resTable = this.resTable.concat(res);\r\n\r\n        const nodes = {};\r\n        const edges = {};\r\n\r\n        this.resTable.forEach((item, index) => {\r\n        // Create a new node if it doesn't already exist\r\n        if (!nodes[item.imagename]) {\r\n            nodes[item.imagename] = {\r\n            name: item.imagename,\r\n            type: 'image',\r\n            color: '#ff0000',\r\n            };\r\n        }\r\n\r\n        if (!nodes[item.searchword]) {\r\n            nodes[item.searchword] = {\r\n            name: item.searchword,\r\n            type: 'linkword',\r\n            color: '#4466cc',\r\n            };\r\n        }\r\n\r\n        // Create a new edge if it doesn't already exist\r\n        const source = item.searchword;\r\n        const target = item.imagename;\r\n        const edgeId = `edge${index + 1}`;\r\n\r\n        if (!edges[edgeId]) {\r\n            edges[edgeId] = { source, target };\r\n        }\r\n        });\r\n\r\n        // Update state with new node and edge lists\r\n        this.nodeList = nodes;\r\n        this.edgeList = edges;\r\n        this.currentPage = 1; // reset current page to 1 after each search\r\n    },\r\n    pageChanged(page) {\r\n        this.currentPage = page;\r\n    }\r\n    },\r\n    computed: {\r\n    totalItemsCount() {\r\n      return this.resTable.length;\r\n    },\r\n    displayedItems() {\r\n      const startIndex = (this.currentPage - 1) * this.perPage;\r\n      const endIndex = startIndex + this.perPage;\r\n      return this.resTable.slice(startIndex, endIndex);\r\n    }\r\n  },\r\n};\r\n</script>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}