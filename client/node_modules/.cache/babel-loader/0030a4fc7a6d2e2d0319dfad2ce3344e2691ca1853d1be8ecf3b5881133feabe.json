{"ast":null,"code":"import { VNetworkGraph } from 'v-network-graph';\nexport default {\n  components: {\n    VNetworkGraph\n  },\n  data() {\n    return {\n      nodes: {\n        node1: {\n          name: \"Node 1\"\n        },\n        node2: {\n          name: \"Node 2\"\n        },\n        node3: {\n          name: \"Node 3\"\n        },\n        node4: {\n          name: \"Node 4\"\n        }\n      },\n      edges: {\n        edge1: {\n          source: \"node1\",\n          target: \"node2\"\n        },\n        edge2: {\n          source: \"node2\",\n          target: \"node3\"\n        },\n        edge3: {\n          source: \"node3\",\n          target: \"node4\"\n        }\n      }\n    };\n  },\n  mounted() {\n    window.addEventListener('resize', this.handleResize);\n    this.handleResize();\n  },\n  beforeDestroy() {\n    window.removeEventListener('resize', this.handleResize);\n  },\n  methods: {\n    handleResize() {\n      const containerWidth = this.$refs.graph.$el.offsetWidth;\n      const containerHeight = this.$refs.graph.$el.offsetHeight;\n      const aspectRatio = containerWidth / containerHeight;\n      const minWidth = 600;\n      const minHeight = 400;\n      let width = containerWidth;\n      let height = containerHeight;\n      if (aspectRatio > 1.5) {\n        // Wide screen\n        width = Math.max(minWidth, height * 1.5);\n      } else if (aspectRatio < 1 / 1.5) {\n        // Tall screen\n        height = Math.max(minHeight, width / 1.5);\n      }\n      this.$refs.graph.setSize(width, height);\n    }\n  }\n};","map":{"version":3,"mappings":"AASE,SAASA,aAAY,QAAS,iBAAgB;AAE9C,eAAe;EACbC,UAAU,EAAE;IACVD;EACF,CAAC;EACDE,IAAI,GAAG;IACL,OAAO;MACLC,KAAK,EAAE;QACLC,KAAK,EAAE;UAAEC,IAAI,EAAE;QAAS,CAAC;QACzBC,KAAK,EAAE;UAAED,IAAI,EAAE;QAAS,CAAC;QACzBE,KAAK,EAAE;UAAEF,IAAI,EAAE;QAAS,CAAC;QACzBG,KAAK,EAAE;UAAEH,IAAI,EAAE;QAAS;MAC1B,CAAC;MACDI,KAAK,EAAE;QACLC,KAAK,EAAE;UAAEC,MAAM,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ,CAAC;QAC3CC,KAAK,EAAE;UAAEF,MAAM,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ,CAAC;QAC3CE,KAAK,EAAE;UAAEH,MAAM,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAQ;MAC5C;IACF;EACF,CAAC;EACDG,OAAO,GAAG;IACRC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY;IACnD,IAAI,CAACA,YAAY,EAAC;EACpB,CAAC;EACDC,aAAa,GAAG;IACdH,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACF,YAAY;EACxD,CAAC;EACDG,OAAO,EAAE;IACPH,YAAY,GAAG;MACb,MAAMI,cAAa,GAAI,IAAI,CAACC,KAAK,CAACC,KAAK,CAACC,GAAG,CAACC,WAAU;MACtD,MAAMC,eAAc,GAAI,IAAI,CAACJ,KAAK,CAACC,KAAK,CAACC,GAAG,CAACG,YAAW;MACxD,MAAMC,WAAU,GAAIP,cAAa,GAAIK,eAAc;MACnD,MAAMG,QAAO,GAAI,GAAE;MACnB,MAAMC,SAAQ,GAAI,GAAE;MACpB,IAAIC,KAAI,GAAIV,cAAa;MACzB,IAAIW,MAAK,GAAIN,eAAc;MAE3B,IAAIE,WAAU,GAAI,GAAG,EAAE;QACrB;QACAG,KAAI,GAAIE,IAAI,CAACC,GAAG,CAACL,QAAQ,EAAEG,MAAK,GAAI,GAAG;MACzC,OAAO,IAAIJ,WAAU,GAAI,IAAI,GAAG,EAAE;QAChC;QACAI,MAAK,GAAIC,IAAI,CAACC,GAAG,CAACJ,SAAS,EAAEC,KAAI,GAAI,GAAG;MAC1C;MAEA,IAAI,CAACT,KAAK,CAACC,KAAK,CAACY,OAAO,CAACJ,KAAK,EAAEC,MAAM;IACxC;EACF;AACF","names":["VNetworkGraph","components","data","nodes","node1","name","node2","node3","node4","edges","edge1","source","target","edge2","edge3","mounted","window","addEventListener","handleResize","beforeDestroy","removeEventListener","methods","containerWidth","$refs","graph","$el","offsetWidth","containerHeight","offsetHeight","aspectRatio","minWidth","minHeight","width","height","Math","max","setSize"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\components\\NetworkGraphView.vue"],"sourcesContent":["<template>\r\n    <v-network-graph\r\n      ref=\"graph\"\r\n      class=\"graph\"\r\n      :nodes=\"nodes\"\r\n      :edges=\"edges\"\r\n    />\r\n  </template>\r\n  <script>\r\n  import { VNetworkGraph } from 'v-network-graph'\r\n  \r\n  export default {\r\n    components: {\r\n      VNetworkGraph\r\n    },\r\n    data() {\r\n      return {\r\n        nodes: {\r\n          node1: { name: \"Node 1\" },\r\n          node2: { name: \"Node 2\" },\r\n          node3: { name: \"Node 3\" },\r\n          node4: { name: \"Node 4\" },\r\n        },\r\n        edges: {\r\n          edge1: { source: \"node1\", target: \"node2\" },\r\n          edge2: { source: \"node2\", target: \"node3\" },\r\n          edge3: { source: \"node3\", target: \"node4\" },\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      window.addEventListener('resize', this.handleResize)\r\n      this.handleResize()\r\n    },\r\n    beforeDestroy() {\r\n      window.removeEventListener('resize', this.handleResize)\r\n    },\r\n    methods: {\r\n      handleResize() {\r\n        const containerWidth = this.$refs.graph.$el.offsetWidth\r\n        const containerHeight = this.$refs.graph.$el.offsetHeight\r\n        const aspectRatio = containerWidth / containerHeight\r\n        const minWidth = 600\r\n        const minHeight = 400\r\n        let width = containerWidth\r\n        let height = containerHeight\r\n  \r\n        if (aspectRatio > 1.5) {\r\n          // Wide screen\r\n          width = Math.max(minWidth, height * 1.5)\r\n        } else if (aspectRatio < 1 / 1.5) {\r\n          // Tall screen\r\n          height = Math.max(minHeight, width / 1.5)\r\n        }\r\n  \r\n        this.$refs.graph.setSize(width, height)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  <style>\r\n  .graph {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}