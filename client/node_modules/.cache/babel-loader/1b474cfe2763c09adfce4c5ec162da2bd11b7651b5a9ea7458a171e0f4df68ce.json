{"ast":null,"code":"import axios from \"axios\";\nimport NetworkGraph from \"../components/NetworkGraphView.vue\";\nimport Pagination from \"vue-pagination-3\";\nexport default {\n  name: \"searchWord\",\n  components: {\n    NetworkGraph,\n    Pagination\n  },\n  data() {\n    return {\n      response: \"\",\n      category: false,\n      keyword: false,\n      searchword: \"\",\n      resTable: [],\n      nodeList: {},\n      edgeList: {},\n      currentPage: 1,\n      perPage: 5\n    };\n  },\n  computed: {\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.perPage;\n      const end = start + this.perPage;\n      return this.resTable.slice(start, end);\n    },\n    totalPages() {\n      return Math.ceil(this.resTable.length / this.perPage);\n    }\n  },\n  methods: {\n    async submitForm() {\n      var res = [];\n      this.nodeList = {};\n      this.edgeList = {};\n      this.resTable = [];\n      await axios.post(\"api/searchGraphKeyword\", {\n        searchword: this.searchword,\n        category: this.category,\n        keyword: this.keyword\n      }).then(response => {\n        if (response.status == 200) {\n          res = response.data; //copy list of records from backend to global variable\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      // Reset form fields\n      this.searchword = \"\";\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n\n      this.resTable = res;\n      this.currentPage = 1; // set the current page to the first page\n    },\n\n    setCurrentPage(page) {\n      this.currentPage = page;\n    }\n  }\n};","map":{"version":3,"mappings":"AA0DE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,YAAW,MAAO,oCAAoC;AAC7D,OAAOC,UAAS,MAAO,kBAAkB;AAEzC,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACVH,YAAY;IACZC;EACF,CAAC;EACDG,IAAI,GAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,CAAC,CAAC;MACZC,QAAQ,EAAE,CAAC,CAAC;MACZC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE;IACX,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAa,GAAG;MACd,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACJ,WAAU,GAAI,CAAC,IAAI,IAAI,CAACC,OAAO;MACnD,MAAMI,GAAE,GAAID,KAAI,GAAI,IAAI,CAACH,OAAO;MAChC,OAAO,IAAI,CAACJ,QAAQ,CAACS,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IACxC,CAAC;IACDE,UAAU,GAAG;MACX,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACZ,QAAQ,CAACa,MAAK,GAAI,IAAI,CAACT,OAAO,CAAC;IACvD;EACF,CAAC;EACDU,OAAO,EAAE;IACP,MAAMC,UAAU,GAAG;MACjB,IAAIC,GAAE,GAAI,EAAE;MACZ,IAAI,CAACf,QAAO,GAAI,CAAC,CAAC;MAClB,IAAI,CAACC,QAAO,GAAI,CAAC,CAAC;MAClB,IAAI,CAACF,QAAO,GAAI,EAAE;MAClB,MAAMV,KAAI,CACP2B,IAAI,CAAC,wBAAwB,EAAE;QAC9BlB,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BF,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,OAAO,EAAE,IAAI,CAACA;MAChB,CAAC,EACAoB,IAAI,CAAEtB,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAACuB,MAAK,IAAK,GAAG,EAAE;UAC1BH,GAAE,GAAIpB,QAAQ,CAACD,IAAI,EAAE;QACvB;MACF,CAAC,EACAyB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB,CAAC,CAAC;MACJ;MACA,IAAI,CAACtB,UAAS,GAAI,EAAE;MACpB,IAAI,CAACF,QAAO,GAAI,KAAK;MACrB,IAAI,CAACC,OAAM,GAAI,KAAK;MACpB,IAAI,CAAC0B,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;MACvB;;MAEA,IAAI,CAAC1B,QAAO,GAAIgB,GAAG;MACnB,IAAI,CAACb,WAAU,GAAI,CAAC,EAAE;IACxB,CAAC;;IACDwB,cAAc,CAACC,IAAI,EAAE;MACnB,IAAI,CAACzB,WAAU,GAAIyB,IAAI;IACzB;EACF;AACF,CAAC","names":["axios","NetworkGraph","Pagination","name","components","data","response","category","keyword","searchword","resTable","nodeList","edgeList","currentPage","perPage","computed","paginatedData","start","end","slice","totalPages","Math","ceil","length","methods","submitForm","res","post","then","status","catch","error","console","log","$refs","form","reset","setCurrentPage","page"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchword\"\r\n          id=\"searchword\"\r\n          v-model=\"searchword\"\r\n          placeholder=\"Searchword\"\r\n          required\r\n        />\r\n        <label>\r\n          <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\" />\r\n          Category\r\n        </label>\r\n        <label>\r\n          <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n          Keyword\r\n        </label>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\" />\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Search Word</th>\r\n            <th>Image Name</th>\r\n            <th>Created Date</th>\r\n            <th>Category</th>\r\n            <th>Keywords</th>\r\n          </tr>\r\n        </thead>\r\n  \r\n        <tbody>\r\n          <tr v-for=\"(item, index) in paginatedData\" :key=\"index\">\r\n            <td>{{ item.searchword }}</td>\r\n            <td>{{ item.imagename }}</td>\r\n            <td>{{ item.created_date }}</td>\r\n            <td>{{ item.category }}</td>\r\n            <td>{{ item.keywords }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <pagination\r\n        v-if=\"resTable.length > 0\"\r\n        :per-page=\"perPage\"\r\n        :data=\"resTable\"\r\n        :show-disabled=\"true\"\r\n        :prev-text=\"'Prev'\"\r\n        :next-text=\"'Next'\"\r\n        :classes=\"'pagination-sm'\"\r\n        @pagination-change-page=\"setCurrentPage\"\r\n      />\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  import NetworkGraph from \"../components/NetworkGraphView.vue\";\r\n  import Pagination from \"vue-pagination-3\";\r\n  \r\n  export default {\r\n    name: \"searchWord\",\r\n    components: {\r\n      NetworkGraph,\r\n      Pagination,\r\n    },\r\n    data() {\r\n      return {\r\n        response: \"\",\r\n        category: false,\r\n        keyword: false,\r\n        searchword: \"\",\r\n        resTable: [],\r\n        nodeList: {},\r\n        edgeList: {},\r\n        currentPage: 1,\r\n        perPage: 5,\r\n      };\r\n    },\r\n    computed: {\r\n      paginatedData() {\r\n        const start = (this.currentPage - 1) * this.perPage;\r\n        const end = start + this.perPage;\r\n        return this.resTable.slice(start, end);\r\n      },\r\n      totalPages() {\r\n        return Math.ceil(this.resTable.length / this.perPage);\r\n      },\r\n    },\r\n    methods: {\r\n      async submitForm() {\r\n        var res = [];\r\n        this.nodeList = {};\r\n        this.edgeList = {};\r\n        this.resTable = [];\r\n        await axios\r\n          .post(\"api/searchGraphKeyword\", {\r\n            searchword: this.searchword,\r\n            category: this.category,\r\n            keyword: this.keyword,\r\n          })\r\n          .then((response) => {\r\n            if (response.status == 200) {\r\n              res = response.data; //copy list of records from backend to global variable\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n        // Reset form fields\r\n        this.searchword = \"\";\r\n        this.category = false;\r\n        this.keyword = false;\r\n        this.$refs.form.reset();\r\n        // clear the input values for the form data fields\r\n  \r\n        this.resTable = res;\r\n        this.currentPage = 1; // set the current page to the first page\r\n      },\r\n      setCurrentPage(page) {\r\n        this.currentPage = page;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}