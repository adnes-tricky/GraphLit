{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_network_graph = _resolveComponent(\"v-network-graph\");\n  return _openBlock(), _createBlock(_component_v_network_graph, {\n    ref: \"graph\",\n    class: \"graph\",\n    nodes: $data.nodes,\n    edges: $data.edges\n  }, null, 8 /* PROPS */, [\"nodes\", \"edges\"]);\n}","map":{"version":3,"mappings":";;;uBACIA,aAKEC;IAJAC,GAAG,EAAC,OAAO;IACXC,KAAK,EAAC,OAAO;IACZC,KAAK,EAAEC,WAAK;IACZC,KAAK,EAAED","names":["_createBlock","_component_v_network_graph","ref","class","nodes","$data","edges"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\components\\NetworkGraphView.vue"],"sourcesContent":["<template>\r\n    <v-network-graph\r\n      ref=\"graph\"\r\n      class=\"graph\"\r\n      :nodes=\"nodes\"\r\n      :edges=\"edges\"\r\n    />\r\n  </template>\r\n  <script>\r\n  import { VNetworkGraph } from 'v-network-graph'\r\n  \r\n  export default {\r\n    components: {\r\n      VNetworkGraph\r\n    },\r\n    data() {\r\n      return {\r\n        nodes: {\r\n          node1: { name: \"Node 1\" },\r\n          node2: { name: \"Node 2\" },\r\n          node3: { name: \"Node 3\" },\r\n          node4: { name: \"Node 4\" },\r\n        },\r\n        edges: {\r\n          edge1: { source: \"node1\", target: \"node2\" },\r\n          edge2: { source: \"node2\", target: \"node3\" },\r\n          edge3: { source: \"node3\", target: \"node4\" },\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      window.addEventListener('resize', this.handleResize)\r\n      this.handleResize()\r\n    },\r\n    beforeDestroy() {\r\n      window.removeEventListener('resize', this.handleResize)\r\n    },\r\n    methods: {\r\n      handleResize() {\r\n        const containerWidth = this.$refs.graph.$el.offsetWidth\r\n        const containerHeight = this.$refs.graph.$el.offsetHeight\r\n        const aspectRatio = containerWidth / containerHeight\r\n        const minWidth = 600\r\n        const minHeight = 400\r\n        let width = containerWidth\r\n        let height = containerHeight\r\n  \r\n        if (aspectRatio > 1.5) {\r\n          // Wide screen\r\n          width = Math.max(minWidth, height * 1.5)\r\n        } else if (aspectRatio < 1 / 1.5) {\r\n          // Tall screen\r\n          height = Math.max(minHeight, width / 1.5)\r\n        }\r\n  \r\n        this.$refs.graph.setSize(width, height)\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  <style>\r\n  .graph {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  </style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}