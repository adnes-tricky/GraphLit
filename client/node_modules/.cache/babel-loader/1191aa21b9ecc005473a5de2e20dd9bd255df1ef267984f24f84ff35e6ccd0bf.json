{"ast":null,"code":"import axios from 'axios';\nimport { VNetworkGraph } from 'v-network-graph';\nimport \"v-network-graph/lib/style.css\";\nexport default {\n  name: 'searchWord',\n  components: {\n    VNetworkGraph\n  },\n  data() {\n    return {\n      response: '',\n      category: false,\n      keyword: false,\n      searchword: '',\n      resTable: [],\n      graphData: {\n        nodes: [{\n          id: '1',\n          label: 'Node 1'\n        }, {\n          id: '2',\n          label: 'Node 2'\n        }, {\n          id: '3',\n          label: 'Node 3'\n        }],\n        links: [{\n          source: '1',\n          target: '2'\n        }, {\n          source: '1',\n          target: '3'\n        }, {\n          source: '2',\n          target: '3'\n        }]\n      },\n      graphOptions: {\n        layout: {\n          hierarchical: false\n        }\n      }\n    };\n  },\n  methods: {\n    async submitForm() {\n      var res = [];\n      this.resTable = [];\n      await axios.post('api/searchGraphKeyword', {\n        searchword: this.searchword,\n        category: this.category,\n        keyword: this.keyword\n      }).then(function (response) {\n        if (response.status == 200) {\n          res = response.data; //copy list of records from backend to global variable\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      // Reset form fields\n      this.searchword = '';\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n      this.resTable = this.resTable.concat(res);\n    },\n    handleNodeClick(node) {\n      console.log('Node clicked:', node);\n    },\n    handleLinkClick(link) {\n      console.log('Link clicked:', link);\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.$refs.graph.initialize();\n    });\n  }\n};","map":{"version":3,"mappings":"AA4EA,OAAOA,KAAI,MAAO,OAAM;AACxB,SAASC,aAAY,QAAS,iBAAiB;AAC/C,OAAO,+BAA+B;AAEtC,eAAc;EACVC,IAAI,EAAE,YAAY;EAClBC,UAAU,EAAE;IACZF;EACF,CAAC;EACCG,IAAI,GAAG;IACH,OAAM;MACFC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE,KAAK;MACdC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MAEZC,SAAS,EAAE;QACPC,KAAK,EAAE,CACH;UAAEC,EAAE,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAS,CAAC,EAC5B;UAAED,EAAE,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAS,CAAC,EAC5B;UAAED,EAAE,EAAE,GAAG;UAAEC,KAAK,EAAE;QAAS,CAAC,CAC/B;QACDC,KAAK,EAAE,CACH;UAAEC,MAAM,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC5B;UAAED,MAAM,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI,CAAC,EAC5B;UAAED,MAAM,EAAE,GAAG;UAAEC,MAAM,EAAE;QAAI,CAAC;MAEpC,CAAC;MACDC,YAAY,EAAE;QACVC,MAAM,EAAE;UACRC,YAAY,EAAE;QACd;MACJ;IACJ;EACJ,CAAC;EACDC,OAAO,EAAE;IACD,MAAMC,UAAU,GAAE;MACd,IAAIC,GAAG,GAAC,EAAC;MACT,IAAI,CAACb,QAAQ,GAAC,EAAC;MACf,MAAMT,KAAK,CAACuB,IAAI,CAAC,wBAAwB,EAAC;QACtCf,UAAU,EAAE,IAAI,CAACA,UAAU;QAC3BF,QAAQ,EAAC,IAAI,CAACA,QAAQ;QACtBC,OAAO,EAAE,IAAI,CAACA;MAClB,CAAC,EACAiB,IAAI,CAAC,UAASnB,QAAQ,EAAC;QACpB,IAAGA,QAAQ,CAACoB,MAAM,IAAE,GAAG,EAAC;UACxBH,GAAG,GAACjB,QAAQ,CAACD,IAAI,EAAE;QACnB;MACJ,CAAC,EACAsB,KAAK,CAACC,KAAI,IAAI;QACXC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACtB,CAAC;MACD;MACA,IAAI,CAACnB,UAAS,GAAI,EAAE;MACpB,IAAI,CAACF,QAAO,GAAI,KAAK;MACrB,IAAI,CAACC,OAAM,GAAI,KAAK;MACpB,IAAI,CAACuB,KAAK,CAACC,IAAI,CAACC,KAAK,EAAE;MACvB;MACA,IAAI,CAACvB,QAAQ,GAAC,IAAI,CAACA,QAAQ,CAACwB,MAAM,CAACX,GAAG;IAC1C,CAAC;IACDY,eAAe,CAACC,IAAI,EAAE;MACtBP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEM,IAAI,CAAC;IAClC,CAAC;IACDC,eAAe,CAACC,IAAI,EAAE;MACtBT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEQ,IAAI,CAAC;IAClC;EACJ,CAAC;EACDC,OAAO,GAAG;IACd,IAAI,CAACC,SAAS,CAAC,MAAM;MACnB,IAAI,CAACT,KAAK,CAACU,KAAK,CAACC,UAAU,EAAE;IAC/B,CAAC,CAAC;EACJ;AACF","names":["axios","VNetworkGraph","name","components","data","response","category","keyword","searchword","resTable","graphData","nodes","id","label","links","source","target","graphOptions","layout","hierarchical","methods","submitForm","res","post","then","status","catch","error","console","log","$refs","form","reset","concat","handleNodeClick","node","handleLinkClick","link","mounted","$nextTick","graph","initialize"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input type=\"text\" name=\"searchword\" id = \"searchword\" v-model=\"searchword\" placeholder=\"Searchword\"/>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\"/>\r\n            Category\r\n        </label>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\"/>\r\n            Keyword\r\n        </label>\r\n        <button type =\"submit\">Search</button>\r\n        </form>\r\n\r\n        <!--Network Graph componenet-->\r\n        <v-network-graph ref=\"graph\" :data=\"graphData\" :options=\"graphOptions\" />\r\n        <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Search Word</th>\r\n                <th>Image Name</th>\r\n                <th>Created Date</th>\r\n                <th>Category</th>\r\n                <th>Keywords</th>\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n            <tr v-for=\"(item, index) in resTable\" :key=\"index\">\r\n                <td>{{ item.searchword }}</td>    \r\n                <td>{{ item.imagename }}</td>\r\n                <td>{{ item.created_date }}</td>\r\n                <td>{{ item.category }}</td>\r\n                <td>{{ item.keywords }}</td>\r\n            </tr>\r\n        </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n<style>\r\n    .graph-node {\r\n  width: 50px;\r\n  height: 50px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 50%;\r\n  color: white;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n}\r\n\r\n.graph-link {\r\n  stroke-width: 3;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n.graph-node {\r\n    width: 50px;\r\n    height: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 50%;\r\n    color: white;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .graph-link {\r\n    stroke-width: 3;\r\n    cursor: pointer;\r\n  }\r\n<script>\r\nimport axios from 'axios'\r\nimport { VNetworkGraph } from 'v-network-graph';\r\nimport \"v-network-graph/lib/style.css\";\r\n\r\nexport default{\r\n    name: 'searchWord',\r\n    components: {\r\n    VNetworkGraph,\r\n  },\r\n    data() {\r\n        return{\r\n            response: '',\r\n            category: false,\r\n            keyword: false,\r\n            searchword: '',\r\n            resTable: [],\r\n\r\n            graphData: {\r\n                nodes: [\r\n                    { id: '1', label: 'Node 1' },\r\n                    { id: '2', label: 'Node 2' },\r\n                    { id: '3', label: 'Node 3' },\r\n                ],\r\n                links: [\r\n                    { source: '1', target: '2' },\r\n                    { source: '1', target: '3' },\r\n                    { source: '2', target: '3' },\r\n                ],\r\n            },\r\n            graphOptions: {\r\n                layout: {\r\n                hierarchical: false,\r\n                },\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n            async submitForm(){\r\n                var res=[]\r\n                this.resTable=[]\r\n                await axios.post('api/searchGraphKeyword',{\r\n                    searchword: this.searchword,\r\n                    category:this.category,\r\n                    keyword: this.keyword\r\n                })\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                    res=response.data; //copy list of records from backend to global variable\r\n                    }\r\n                })\r\n                .catch(error =>{\r\n                    console.log(error);\r\n                })  \r\n                // Reset form fields\r\n                this.searchword = '';\r\n                this.category = false;\r\n                this.keyword = false;\r\n                this.$refs.form.reset();\r\n                // clear the input values for the form data fields\r\n                this.resTable=this.resTable.concat(res) \r\n            },\r\n            handleNodeClick(node) {\r\n            console.log('Node clicked:', node);\r\n            },\r\n            handleLinkClick(link) {\r\n            console.log('Link clicked:', link);\r\n            }\r\n        },\r\n        mounted() {\r\n    this.$nextTick(() => {\r\n      this.$refs.graph.initialize();\r\n    });\r\n  }\r\n}\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}