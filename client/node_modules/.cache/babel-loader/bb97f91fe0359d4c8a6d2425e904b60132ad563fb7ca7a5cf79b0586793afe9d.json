{"ast":null,"code":"import axios from 'axios';\nimport NetworkGraph from '../components/NetworkGraphView.vue';\nimport VuePagination from 'vue-pagination-2';\nexport default {\n  name: 'searchWord',\n  components: {\n    NetworkGraph,\n    VuePagination\n  },\n  data() {\n    return {\n      response: '',\n      category: false,\n      keyword: false,\n      searchword: '',\n      resTable: [],\n      nodeList: {},\n      edgeList: {},\n      paginationProps: {\n        theme: 'bootstrap4',\n        // Change this to the desired theme\n        perPage: 10,\n        // Change this to the desired number of items per page\n        currentPage: 1,\n        totalPages: 1,\n        showPagination: false,\n        texts: {\n          prevPage: 'Previous',\n          nextPage: 'Next',\n          first: 'First',\n          last: 'Last',\n          prevChunk: '<<',\n          nextChunk: '>>'\n        }\n      }\n    };\n  },\n  methods: {\n    async submitForm() {\n      var res = [];\n      this.nodeList = {};\n      this.edgeList = {};\n      this.resTable = [];\n      await axios.post('api/searchGraphKeyword', {\n        searchword: this.searchword,\n        category: this.category,\n        keyword: this.keyword\n      }).then(function (response) {\n        if (response.status == 200) {\n          res = response.data; //copy list of records from backend to global variable\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      // Reset form fields\n      this.searchword = '';\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n      this.resTable = this.resTable.concat(res);\n      const nodes = {};\n      const edges = {};\n      this.resTable.forEach((item, index) => {\n        // Create a new node if it doesn't already exist\n        if (!nodes[item.imagename]) {\n          nodes[item.imagename] = {\n            name: item.imagename,\n            type: \"image\",\n            color: \"#ff0000\"\n          };\n        }\n        if (!nodes[item.searchword]) {\n          nodes[item.searchword] = {\n            name: item.searchword,\n            type: \"linkword\",\n            color: \"#4466cc\"\n          };\n        }\n\n        // Create a new edge if it doesn't already exist\n        const source = item.searchword;\n        const target = item.imagename;\n        const edgeId = `edge${index + 1}`;\n        if (!edges[edgeId]) {\n          edges[edgeId] = {\n            source,\n            target\n          };\n        }\n      });\n\n      // Update state with new node and edge lists\n      this.nodeList = nodes;\n      this.edgeList = edges;\n    },\n    updatePaginationProps() {\n      this.paginationProps.totalPages = Math.ceil(this.resTable.length / this.paginationProps.perPage);\n      this.paginationProps.showPagination = this.resTable.length > this.paginationProps.perPage;\n    },\n    setPage(pageNumber) {\n      this.paginationProps.currentPage = pageNumber;\n    },\n    pageClasses(pageNumber) {\n      return {\n        active: this.paginationProps.currentPage === pageNumber\n      };\n    },\n    pageEvents(pageNumber) {\n      return {\n        click: () => {\n          this.setPage(pageNumber);\n        }\n      };\n    },\n    getPaginatedData() {\n      const startIndex = (this.paginationProps.currentPage - 1) * this.paginationProps.perPage;\n      return this.resTable.slice(startIndex, startIndex + this.paginationProps.perPage);\n    }\n  },\n  watch: {\n    resTable() {\n      this.updatePaginationProps();\n    },\n    'paginationProps.currentPage'(newValue) {\n      this.resTablePaginated = this.getPaginatedData();\n    }\n  },\n  computed: {\n    resTablePaginated() {\n      return this.getPaginatedData();\n    },\n    pages() {\n      const range = (start, end) => Array.from({\n        length: end - start + 1\n      }, (v, k) => k + start);\n      const totalPages = this.paginationProps.totalPages;\n      const currentPage = this.paginationProps.currentPage;\n      const visiblePages = 5;\n      const half = Math.floor(visiblePages / 2);\n      let startPage = currentPage - half;\n      if (startPage <= 0) {\n        startPage = 1;\n      }\n      let endPage = startPage + visiblePages - 1;\n      if (endPage > totalPages) {\n        endPage = totalPages;\n        startPage = endPage - visiblePages + 1;\n        if (startPage <= 0) {\n          startPage = 1;\n        }\n      }\n      return range(startPage, endPage);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","NetworkGraph","VuePagination","name","components","data","response","category","keyword","searchword","resTable","nodeList","edgeList","paginationProps","theme","perPage","currentPage","totalPages","showPagination","texts","prevPage","nextPage","first","last","prevChunk","nextChunk","methods","submitForm","res","post","then","status","catch","error","console","log","$refs","form","reset","concat","nodes","edges","forEach","item","index","imagename","type","color","source","target","edgeId","updatePaginationProps","Math","ceil","length","setPage","pageNumber","pageClasses","active","pageEvents","click","getPaginatedData","startIndex","slice","watch","newValue","resTablePaginated","computed","pages","range","start","end","Array","from","v","k","visiblePages","half","floor","startPage","endPage"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input type=\"text\" name=\"searchword\" id = \"searchword\" v-model=\"searchword\" placeholder=\"Searchword\" required/>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\"/>\r\n            Category\r\n        </label>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n            Keyword\r\n        </label>\r\n        <button type =\"submit\">Search</button>\r\n        </form>\r\n        <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\"/>\r\n        <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Search Word</th>\r\n                <th>Image Name</th>\r\n                <th>Created Date</th>\r\n                <th>Category</th>\r\n                <th>Keywords</th>\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n            <tr v-for=\"(item, index) in resTable\" :key=\"index\">\r\n                <td>{{ item.searchword }}</td>    \r\n                <td>{{ item.imagename }}</td>\r\n                <td>{{ item.created_date }}</td>\r\n                <td>{{ item.category }}</td>\r\n                <td>{{ item.keywords }}</td>\r\n            </tr>\r\n        </tbody>\r\n        </table>\r\n        <VuePagination :props=\"paginationProps\" />\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport NetworkGraph from '../components/NetworkGraphView.vue'\r\nimport VuePagination from 'vue-pagination-2';\r\n\r\nexport default{\r\n    name: 'searchWord',\r\n    components: {\r\n        NetworkGraph,\r\n        VuePagination,\r\n    },\r\n    data() {\r\n        return{\r\n            response: '',\r\n            category: false,\r\n            keyword: false,\r\n            searchword: '',\r\n            resTable: [],\r\n            nodeList: {},\r\n            edgeList: {},\r\n            paginationProps: {\r\n                theme: 'bootstrap4', // Change this to the desired theme\r\n                perPage: 10, // Change this to the desired number of items per page\r\n                currentPage: 1,\r\n                totalPages: 1,\r\n                showPagination: false,\r\n                texts: {\r\n                    prevPage: 'Previous',\r\n                    nextPage: 'Next',\r\n                    first: 'First',\r\n                    last: 'Last',\r\n                    prevChunk: '<<',\r\n                    nextChunk: '>>',\r\n                },\r\n            },\r\n        }\r\n    },\r\n    methods: {\r\n            async submitForm(){\r\n                var res=[]\r\n                this.nodeList={}\r\n                this.edgeList={}\r\n                this.resTable=[]\r\n                await axios.post('api/searchGraphKeyword',{\r\n                    searchword: this.searchword,\r\n                    category:this.category,\r\n                    keyword: this.keyword\r\n                })\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                    res=response.data; //copy list of records from backend to global variable\r\n                    }\r\n                })\r\n                .catch(error =>{\r\n                    console.log(error);\r\n                })  \r\n                // Reset form fields\r\n                this.searchword = '';\r\n                this.category = false;\r\n                this.keyword = false;\r\n                this.$refs.form.reset();\r\n                // clear the input values for the form data fields\r\n                this.resTable=this.resTable.concat(res)\r\n                \r\n                const nodes = {};\r\n                const edges = {};\r\n\r\n                this.resTable.forEach((item, index) => {\r\n                // Create a new node if it doesn't already exist\r\n                if (!nodes[item.imagename]) {\r\n                    nodes[item.imagename] = { name: item.imagename, type: \"image\", color:\"#ff0000\" };\r\n                }\r\n                \r\n                if (!nodes[item.searchword]) {\r\n                    nodes[item.searchword] = { name: item.searchword, type: \"linkword\", color: \"#4466cc\" };\r\n                }\r\n\r\n                // Create a new edge if it doesn't already exist\r\n                const source = item.searchword;\r\n                const target = item.imagename;\r\n                const edgeId = `edge${index + 1}`;\r\n\r\n                if (!edges[edgeId]) {\r\n                    edges[edgeId] = { source, target };\r\n                }\r\n                });\r\n\r\n                // Update state with new node and edge lists\r\n                this.nodeList = nodes;\r\n                this.edgeList = edges;\r\n            },\r\n            updatePaginationProps() {\r\n                this.paginationProps.totalPages = Math.ceil(this.resTable.length / this.paginationProps.perPage);\r\n                this.paginationProps.showPagination = this.resTable.length > this.paginationProps.perPage;\r\n                },\r\n                setPage(pageNumber) {\r\n                this.paginationProps.currentPage = pageNumber;\r\n                },\r\n                pageClasses(pageNumber) {\r\n                return {\r\n                    active: this.paginationProps.currentPage === pageNumber,\r\n                };\r\n                },\r\n                pageEvents(pageNumber) {\r\n                return {\r\n                    click: () => {\r\n                    this.setPage(pageNumber);\r\n                    },\r\n                };\r\n                },\r\n                getPaginatedData() {\r\n                const startIndex = (this.paginationProps.currentPage - 1) * this.paginationProps.perPage;\r\n                return this.resTable.slice(startIndex, startIndex + this.paginationProps.perPage);\r\n                },\r\n            },\r\n            watch: {\r\n                resTable() {\r\n                this.updatePaginationProps();\r\n                },\r\n                'paginationProps.currentPage'(newValue) {\r\n                this.resTablePaginated = this.getPaginatedData();\r\n                },\r\n            },\r\n            computed: {\r\n                resTablePaginated() {\r\n                return this.getPaginatedData();\r\n                },\r\n                pages() {\r\n                const range = (start, end) => Array.from({ length: end - start + 1 }, (v, k) => k + start);\r\n                const totalPages = this.paginationProps.totalPages;\r\n                const currentPage = this.paginationProps.currentPage;\r\n                const visiblePages = 5;\r\n                const half = Math.floor(visiblePages / 2);\r\n                let startPage = currentPage - half;\r\n                if (startPage <= 0) {\r\n                    startPage = 1;\r\n                }\r\n                let endPage = startPage + visiblePages - 1;\r\n                if (endPage > totalPages) {\r\n                    endPage = totalPages;\r\n                    startPage = endPage - visiblePages + 1;\r\n                    if (startPage <= 0) {\r\n                    startPage = 1;\r\n                    }\r\n                }\r\n                return range(startPage, endPage);\r\n                },\r\n        }\r\n}\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}