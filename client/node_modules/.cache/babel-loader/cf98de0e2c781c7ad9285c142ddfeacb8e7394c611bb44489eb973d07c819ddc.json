{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      file: [],\n      previewUrls: [],\n      image_name: \"\",\n      imageName: \"images\",\n      category: \"\",\n      keywords: \"\",\n      created_date: \"\"\n    };\n  },\n  methods: {\n    previewImage(event) {\n      this.file = event.target.files;\n      for (let i = 0; i < this.file.length; i++) {\n        const imgfile = this.file[i];\n        const reader = new FileReader();\n        reader.onload = event => {\n          this.previewUrls.push(event.target.result);\n        };\n        reader.readAsDataURL(imgfile);\n      }\n    },\n    uploadImage() {\n      const batchSize = 10;\n      const numItems = this.file.length;\n      const numBatches = Math.ceil(numItems / batchSize);\n      const files = [];\n      for (let i = 0; i < this.file.length; i++) {\n        files.push(this.file[i]);\n      }\n      for (let i = 0; i < numBatches; i++) {\n        const start = i * batchSize;\n        const end = Math.min((i + 1) * batchSize, numItems);\n        const batch = files.slice(start, end);\n        let formData = new FormData();\n        formData.append('imageName', this.imageName);\n        formData.append('image_name', this.image_name);\n        formData.append('category', this.category);\n        formData.append('keywords', this.keywords);\n        formData.append('created_date', this.created_date);\n        for (let j = 0; j < batchSize; j++) {\n          formData.append('file', batch[j]);\n        }\n        //console.log(formData.image_name);\n        axios.post('/api/uploadImage', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        }).then(response => {\n          console.log(response.data);\n          this.prevPermit = false;\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","data","file","previewUrls","image_name","imageName","category","keywords","created_date","methods","previewImage","event","target","files","i","length","imgfile","reader","FileReader","onload","push","result","readAsDataURL","uploadImage","batchSize","numItems","numBatches","Math","ceil","start","end","min","batch","slice","formData","FormData","append","j","post","headers","then","response","console","log","prevPermit","catch","error"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\components\\FileUpload.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <form ref=\"form\" @submit.prevent=\"uploadImage\">\r\n      <!-- <input type=\"file\" ref=\"fileInput\" @change=\"handleFileChange\"/>\r\n      <img :src=\"imagePreview\"/> -->\r\n      <input type=\"file\" @change=\"previewImage\" multiple/>\r\n      <!-- <img v-if=\"preview\" :src=\"preview\"/> -->\r\n      <div v-for=\"(url, index) in previewUrls\" :key=\"index\">\r\n        <img :src=\"url\" alt=\"Preview Image\" />\r\n      </div>\r\n      <div>\t\r\n\t\t\t\t<label>Image name</label>\r\n\t\t\t\t<input type =\"text\" name=\"image_name\" id = \"image_name\" v-model=\"image_name\" />\r\n\t\t\t</div>\r\n      <div>\t\r\n\t\t\t\t<label>Category</label>\r\n\t\t\t\t<input type =\"text\" name=\"category\" id = \"category\" v-model=\"category\" />\r\n\t\t\t</div>\r\n      <div>\t\r\n\t\t\t\t<label>Keywords</label>\r\n\t\t\t\t<input type =\"text\" name=\"keywords\" id = \"keywords\" v-model=\"keywords\" />\r\n\t\t\t</div>\r\n      <div>\t\r\n        <label>Date</label>\r\n\t\t\t\t<input type =\"date\" name=\"create_date\" id = \"create_date\" v-model=\"created_date\" />\r\n\t\t\t</div>\r\n      <button type=\"submit\">Upload Image</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      file: [],\r\n      previewUrls: [],\r\n      image_name: \"\",\r\n      imageName: \"images\",\r\n      category: \"\",\r\n      keywords: \"\",\r\n      created_date: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    previewImage(event) {\r\n      this.file = event.target.files;\r\n      for (let i = 0; i < this.file.length; i++) {\r\n        const imgfile = this.file[i];\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n        this.previewUrls.push(event.target.result);\r\n        };\r\n        reader.readAsDataURL(imgfile);\r\n      }\r\n    },\r\n    uploadImage() {\r\n      const batchSize=10;\r\n      const numItems= this.file.length;\r\n      const numBatches= Math.ceil(numItems/batchSize);\r\n      const files=[];\r\n      for(let i=0;i<this.file.length;i++){\r\n        files.push(this.file[i]);\r\n      }\r\n      for (let i = 0; i < numBatches; i++) {\r\n        const start = i * batchSize;\r\n        const end = Math.min((i + 1) * batchSize, numItems);\r\n        const batch =files.slice(start, end);\r\n        \r\n        let formData = new FormData();\r\n        formData.append('imageName', this.imageName);\r\n        formData.append('image_name',this.image_name);\r\n        formData.append('category', this.category);\r\n        formData.append('keywords', this.keywords);\r\n        formData.append('created_date', this.created_date);\r\n        for(let j=0;j<batchSize;j++){\r\n          formData.append('file', batch[j]);  \r\n        }\r\n        //console.log(formData.image_name);\r\n        axios.post('/api/uploadImage', formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        })\r\n        .then(response => {\r\n          console.log(response.data);\r\n          this.prevPermit=false;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        }); \r\n      }\r\n    },\r\n  },\r\n  \r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}