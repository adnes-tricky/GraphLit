{"ast":null,"code":"import axios from 'axios';\nimport NetworkGraph from '../components/NetworkGraphView.vue';\nimport VuePaginate from 'vuejs-paginate';\nexport default {\n  name: 'searchWord',\n  components: {\n    NetworkGraph\n  },\n  data() {\n    return {\n      response: '',\n      category: false,\n      keyword: false,\n      searchword: '',\n      resTable: [],\n      nodeList: {},\n      edgeList: {},\n      items: [],\n      // array of items to paginate\n      pageSize: 10,\n      // number of items to display per page\n      currentPage: 1 // current page number\n    };\n  },\n\n  computed: {\n    pageCount() {\n      return Math.ceil(this.resTable.length / this.pageSize);\n    }\n  },\n  methods: {\n    paginate(pageNumber) {\n      this.currentPage = pageNumber;\n    },\n    async submitForm() {\n      var res = [];\n      this.nodeList = {};\n      this.edgeList = {};\n      this.resTable = [];\n      await axios.post('api/searchGraphKeyword', {\n        searchword: this.searchword,\n        category: this.category,\n        keyword: this.keyword\n      }).then(function (response) {\n        if (response.status == 200) {\n          res = response.data; //copy list of records from backend to global variable\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      // Reset form fields\n      this.searchword = '';\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n      console.log(res);\n      this.resTable = this.resTable.concat(res);\n      const nodes = {};\n      const edges = {};\n      this.resTable.forEach((item, index) => {\n        // Create a new node if it doesn't already exist\n        if (!nodes[item.imagename]) {\n          nodes[item.imagename] = {\n            name: item.imagename,\n            type: \"image\",\n            color: \"#ff0000\"\n          };\n        }\n        if (!nodes[item.searchword]) {\n          nodes[item.searchword] = {\n            name: item.searchword,\n            type: \"linkword\",\n            color: \"#4466cc\"\n          };\n        }\n\n        // Create a new edge if it doesn't already exist\n        const source = item.searchword;\n        const target = item.imagename;\n        const edgeId = `edge${index + 1}`;\n        if (!edges[edgeId]) {\n          edges[edgeId] = {\n            source,\n            target\n          };\n        }\n      });\n\n      // Update state with new node and edge lists\n      this.nodeList = nodes;\n      this.edgeList = edges;\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","NetworkGraph","VuePaginate","name","components","data","response","category","keyword","searchword","resTable","nodeList","edgeList","items","pageSize","currentPage","computed","pageCount","Math","ceil","length","methods","paginate","pageNumber","submitForm","res","post","then","status","catch","error","console","log","$refs","form","reset","concat","nodes","edges","forEach","item","index","imagename","type","color","source","target","edgeId"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input type=\"text\" name=\"searchword\" id = \"searchword\" v-model=\"searchword\" placeholder=\"Searchword\" required/>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\"/>\r\n            Category\r\n        </label>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n            Keyword\r\n        </label>\r\n        <button type =\"submit\">Search</button>\r\n        </form>\r\n        <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\"/>\r\n\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Search Word</th>\r\n                    <th>Image Name</th>\r\n                    <th>Created Date</th>\r\n                    <th>Category</th>\r\n                    <th>Keywords</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr v-for=\"(item, index) in paginatedData\" :key=\"index\">\r\n                    <td>{{ item.searchword }}</td>\r\n                    <td>{{ item.imagename }}</td>\r\n                    <td>{{ item.created_date }}</td>\r\n                    <td>{{ item.category }}</td>\r\n                    <td>{{ item.keywords }}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <vue-paginate\r\n                :page-count=\"pageCount\"\r\n                :margin-pages=\"2\"\r\n                :prev-text=\"'Previous'\"\r\n                :next-text=\"'Next'\"\r\n                :click-handler=\"paginate\"\r\n                :container-class=\"'pagination'\"\r\n            />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport NetworkGraph from '../components/NetworkGraphView.vue'\r\nimport VuePaginate from 'vuejs-paginate';\r\n\r\nexport default{\r\n    name: 'searchWord',\r\n    components: {\r\n        NetworkGraph\r\n    },\r\n    data() {\r\n        return{\r\n            response: '',\r\n            category: false,\r\n            keyword: false,\r\n            searchword: '',\r\n            resTable: [],\r\n            nodeList: {},\r\n            edgeList: {},\r\n            items: [], // array of items to paginate\r\n            pageSize: 10, // number of items to display per page\r\n            currentPage: 1, // current page number\r\n        }\r\n    },\r\n    computed: {\r\n            pageCount() {\r\n                return Math.ceil(this.resTable.length / this.pageSize);\r\n            },\r\n    },\r\n    methods: {\r\n            paginate(pageNumber) {\r\n                this.currentPage = pageNumber;\r\n            },\r\n            async submitForm(){\r\n                var res=[]\r\n                this.nodeList={}\r\n                this.edgeList={}\r\n                this.resTable=[]\r\n                await axios.post('api/searchGraphKeyword',{\r\n                    searchword: this.searchword,\r\n                    category:this.category,\r\n                    keyword: this.keyword\r\n                })\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                    res=response.data; //copy list of records from backend to global variable\r\n                    }\r\n                })\r\n                .catch(error =>{\r\n                    console.log(error);\r\n                })  \r\n                // Reset form fields\r\n                this.searchword = '';\r\n                this.category = false;\r\n                this.keyword = false;\r\n                this.$refs.form.reset();\r\n                // clear the input values for the form data fields\r\n                console.log(res)\r\n                this.resTable=this.resTable.concat(res)\r\n                \r\n                const nodes = {};\r\n                const edges = {};\r\n\r\n                this.resTable.forEach((item, index) => {\r\n                // Create a new node if it doesn't already exist\r\n                if (!nodes[item.imagename]) {\r\n                    nodes[item.imagename] = { name: item.imagename, type: \"image\", color:\"#ff0000\" };\r\n                }\r\n                \r\n                if (!nodes[item.searchword]) {\r\n                    nodes[item.searchword] = { name: item.searchword, type: \"linkword\", color: \"#4466cc\" };\r\n                }\r\n\r\n                // Create a new edge if it doesn't already exist\r\n                const source = item.searchword;\r\n                const target = item.imagename;\r\n                const edgeId = `edge${index + 1}`;\r\n\r\n                if (!edges[edgeId]) {\r\n                    edges[edgeId] = { source, target };\r\n                }\r\n                });\r\n\r\n                // Update state with new node and edge lists\r\n                this.nodeList = nodes;\r\n                this.edgeList = edges;\r\n            }\r\n        }\r\n}\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}