{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, withModifiers as _withModifiers, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Search\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Search\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Search Word\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Image Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Created Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Category\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Keywords\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_network_graph = _resolveComponent(\"network-graph\");\n  const _component_pagination = _resolveComponent(\"pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    ref: \"form\",\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    name: \"searchword\",\n    id: \"searchword\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchword = $event),\n    placeholder: \"Searchword\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchword]]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"category\",\n    id: \"category\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.category = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.category]]), _createTextVNode(\" Category \")]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"keyword\",\n    id: \"keyword\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.keyword = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.keyword]]), _createTextVNode(\" Keyword \")]), _hoisted_3], 544 /* HYDRATE_EVENTS, NEED_PATCH */), _createVNode(_component_network_graph, {\n    \"node-list\": $data.nodeList,\n    \"edge-list\": $data.edgeList\n  }, null, 8 /* PROPS */, [\"node-list\", \"edge-list\"]), _createElementVNode(\"div\", null, [_createElementVNode(\"table\", null, [_hoisted_4, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.displayedItems, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.searchword), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.imagename), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.created_date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.keywords), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createVNode(_component_pagination, {\n    \"current-page\": $data.currentPage,\n    total: $options.totalItems,\n    \"per-page\": $data.perPage,\n    onPageChanged: $options.pageChanged\n  }, null, 8 /* PROPS */, [\"current-page\", \"total\", \"per-page\", \"onPageChanged\"])])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAQ;gCAEfC,oBAAe,YAAX,QAAM;gCAiBVA,oBAAqC;EAA7BC,IAAI,EAAC;AAAQ,GAAC,QAAM;gCAK1BD,oBAQQ,6BAPNA,oBAMK,0BALHA,oBAAoB,YAAhB,aAAW,gBACfA,oBAAmB,YAAf,YAAU,gBACdA,oBAAqB,YAAjB,cAAY,gBAChBA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ;;;;;uBA9BtBE,oBAkDM,OAlDNC,UAkDM,GAjDJH,oBAmBO;IAnBDI,GAAG,EAAC,MAAM;IAAEC,QAAM,wDAAUC,mDAAU;MAC1CC,UAAe,kBACfP,oBAOE;IANAC,IAAI,EAAC,MAAM;IACXO,IAAI,EAAC,YAAY;IACjBC,EAAE,EAAC,YAAY;+DACNC,gBAAU;IACnBC,WAAW,EAAC,YAAY;IACxBC,QAAQ,EAAR;iDAFSF,gBAAU,KAIrBV,oBAGQ,gCAFNA,oBAA0E;IAAnEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;+DAAUC,cAAQ;qDAARA,cAAQ,sBAAI,YAE5E,KACAV,oBAGQ,gCAFNA,oBAAuE;IAAhEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,SAAS;IAACC,EAAE,EAAC,SAAS;+DAAUC,aAAO;qDAAPA,aAAO,sBAAI,WAEzE,KACAG,UAAqC,0CAEvCC,aAA6DC;IAA7C,WAAS,EAAEL,cAAQ;IAAG,WAAS,EAAEA;uDACjDV,oBA2BM,cA1BJA,oBAmBQ,gBAlBNgB,UAQQ,EACRhB,oBAQQ,mCAPNE,oBAMKe,6BANuBX,uBAAc,GAA9BY,IAAI,EAAEC,KAAK;yBAAvBjB,oBAMK;MANwCkB,GAAG,EAAED;IAAK,IACrDnB,oBAA8B,6BAAvBkB,IAAI,CAACG,UAAU,kBACtBrB,oBAA6B,6BAAtBkB,IAAI,CAACI,SAAS,kBACrBtB,oBAAgC,6BAAzBkB,IAAI,CAACK,YAAY,kBACxBvB,oBAA4B,6BAArBkB,IAAI,CAACM,QAAQ,kBACpBxB,oBAA4B,6BAArBkB,IAAI,CAACO,QAAQ;sCAI1BX,aAKEY;IAJC,cAAY,EAAEhB,iBAAW;IACzBiB,KAAK,EAAErB,mBAAU;IACjB,UAAQ,EAAEI,aAAO;IACjBkB,aAAY,EAAEtB","names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","ref","onSubmit","$options","_hoisted_2","name","id","$data","placeholder","required","_hoisted_3","_createVNode","_component_network_graph","_hoisted_4","_Fragment","item","index","key","searchword","imagename","created_date","category","keywords","_component_pagination","total","onPageChanged"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchword\"\r\n          id=\"searchword\"\r\n          v-model=\"searchword\"\r\n          placeholder=\"Searchword\"\r\n          required\r\n        />\r\n        <label>\r\n          <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\" />\r\n          Category\r\n        </label>\r\n        <label>\r\n          <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n          Keyword\r\n        </label>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\" />\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Search Word</th>\r\n              <th>Image Name</th>\r\n              <th>Created Date</th>\r\n              <th>Category</th>\r\n              <th>Keywords</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(item, index) in displayedItems\" :key=\"index\">\r\n              <td>{{ item.searchword }}</td>\r\n              <td>{{ item.imagename }}</td>\r\n              <td>{{ item.created_date }}</td>\r\n              <td>{{ item.category }}</td>\r\n              <td>{{ item.keywords }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <pagination\r\n          :current-page=\"currentPage\"\r\n          :total=\"totalItems\"\r\n          :per-page=\"perPage\"\r\n          @page-changed=\"pageChanged\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport NetworkGraph from '../components/NetworkGraphView.vue';\r\nimport Pagination from 'vue-pagination-2';\r\n\r\nexport default {\r\n  name: 'searchWord',\r\n  components: {\r\n    NetworkGraph,\r\n    Pagination,\r\n  },\r\n  data() {\r\n    return {\r\n      response: '',\r\n      category: false,\r\n      keyword: false,\r\n      searchword: '',\r\n      resTable: [],\r\n      nodeList: {},\r\n      edgeList: {},\r\n      currentPage: 1,\r\n      perPage: 10,\r\n    };\r\n  },\r\n  computed: {\r\n    totalItems() {\r\n      return this.resTable.length;\r\n    },\r\n    displayedItems() {\r\n      const startIndex = (this.currentPage - 1) * this.perPage;\r\n      const endIndex = startIndex + this.perPage;\r\n      return this.resTable.slice(startIndex, endIndex);\r\n    },\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      var res = [];\r\n      this.nodeList = {};\r\n      this.edgeList = {};\r\n      this.resTable = [];\r\n      try {\r\n        const response = await axios.post('api/searchGraphKeyword', {\r\n          searchword: this.searchword,\r\n          category: this.category,\r\n          keyword: this.keyword,\r\n        });\r\n        if (response.status == 200) {\r\n          res = response.data;\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n      // Reset form fields\r\n      this.searchword = '';\r\n      this.category = false;\r\n      this.keyword = false;\r\n      this.$refs.form.reset();\r\n      // clear the input values for the form data fields\r\n      this.resTable = this.resTable.concat(res);\r\n\r\n      const nodes = {};\r\n      const edges = {};\r\n\r\n      this.resTable.forEach((item, index) => {\r\n        // Create a new node if it doesn't already exist\r\n        if (!nodes[item.imagename]) {\r\n          nodes[item.imagename] = {\r\n            name: item.imagename,\r\n            type: 'image',\r\n            color: '#ff0000',\r\n          };\r\n        }\r\n\r\n        if (!nodes[item.searchword]) {\r\n          nodes[item.searchword] = {\r\n            name: item.searchword,\r\n            type: 'linkword',\r\n            color: '#4466cc',\r\n          };\r\n        }\r\n\r\n        // Create a new edge if it doesn't already exist\r\n        const source = item.searchword;\r\n        const target = item.imagename;\r\n        const edgeId = `edge${index + 1}`;\r\n\r\n        if (!edges[edgeId]) {\r\n          edges[edgeId] = { source, target };\r\n        }\r\n      });\r\n\r\n      // Update state with new node and edge lists\r\n      this.nodeList = nodes;\r\n      this.edgeList = edges;\r\n    },\r\n    pageChanged(page) {\r\n      this.currentPage = page;\r\n    },\r\n  },\r\n};\r\n</script>\r\n "]},"metadata":{},"sourceType":"module","externalDependencies":[]}