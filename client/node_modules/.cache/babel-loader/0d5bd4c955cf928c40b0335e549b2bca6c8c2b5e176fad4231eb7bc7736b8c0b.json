{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, withModifiers as _withModifiers, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Search\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Search\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Search Word\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Image Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Created Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Category\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Keywords\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_network_graph = _resolveComponent(\"network-graph\");\n  const _component_pagination = _resolveComponent(\"pagination\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    ref: \"form\",\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    name: \"searchword\",\n    id: \"searchword\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchword = $event),\n    placeholder: \"Searchword\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchword]]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"category\",\n    id: \"category\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.category = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.category]]), _createTextVNode(\" Category \")]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"keyword\",\n    id: \"keyword\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.keyword = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.keyword]]), _createTextVNode(\" Keyword \")]), _hoisted_3], 544 /* HYDRATE_EVENTS, NEED_PATCH */), _createVNode(_component_network_graph, {\n    \"node-list\": $data.nodeList,\n    \"edge-list\": $data.edgeList\n  }, null, 8 /* PROPS */, [\"node-list\", \"edge-list\"]), _createElementVNode(\"table\", null, [_hoisted_4, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.paginatedData, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.searchword), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.imagename), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.created_date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.keywords), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), $data.resTable.length > 0 ? (_openBlock(), _createBlock(_component_pagination, {\n    key: 0,\n    \"model-value\": $data.currentPage,\n    records: $options.totalPages,\n    \"per-page\": $data.perPage,\n    ref: \"pagination\"\n  }, null, 8 /* PROPS */, [\"model-value\", \"records\", \"per-page\"])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAQ;gCAEfC,oBAAe,YAAX,QAAM;gCAiBVA,oBAAqC;EAA7BC,IAAI,EAAC;AAAQ,GAAC,QAAM;gCAI5BD,oBAQQ,6BAPNA,oBAMK,0BALHA,oBAAoB,YAAhB,aAAW,gBACfA,oBAAmB,YAAf,YAAU,gBACdA,oBAAqB,YAAjB,cAAY,gBAChBA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ;;;;;uBA7BpBE,oBAoDM,OApDNC,UAoDM,GAnDJH,oBAmBO;IAnBDI,GAAG,EAAC,MAAM;IAAEC,QAAM,wDAAUC,mDAAU;MAC1CC,UAAe,kBACfP,oBAOE;IANAC,IAAI,EAAC,MAAM;IACXO,IAAI,EAAC,YAAY;IACjBC,EAAE,EAAC,YAAY;+DACNC,gBAAU;IACnBC,WAAW,EAAC,YAAY;IACxBC,QAAQ,EAAR;iDAFSF,gBAAU,KAIrBV,oBAGQ,gCAFNA,oBAA0E;IAAnEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;+DAAUC,cAAQ;qDAARA,cAAQ,sBAAI,YAE5E,KACAV,oBAGQ,gCAFNA,oBAAuE;IAAhEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,SAAS;IAACC,EAAE,EAAC,SAAS;+DAAUC,aAAO;qDAAPA,aAAO,sBAAI,WAEzE,KACAG,UAAqC,0CAEvCC,aAA6DC;IAA7C,WAAS,EAAEL,cAAQ;IAAG,WAAS,EAAEA;uDACjDV,oBAoBQ,gBAnBNgB,UAQQ,EAERhB,oBAQQ,mCAPNE,oBAMKe,6BANuBX,sBAAa,GAA7BY,IAAI,EAAEC,KAAK;yBAAvBjB,oBAMK;MANuCkB,GAAG,EAAED;IAAK,IACpDnB,oBAA8B,6BAAvBkB,IAAI,CAACG,UAAU,kBACtBrB,oBAA6B,6BAAtBkB,IAAI,CAACI,SAAS,kBACrBtB,oBAAgC,6BAAzBkB,IAAI,CAACK,YAAY,kBACxBvB,oBAA4B,6BAArBkB,IAAI,CAACM,QAAQ,kBACpBxB,oBAA4B,6BAArBkB,IAAI,CAACO,QAAQ;sCAKlBf,cAAQ,CAACgB,MAAM,sBADvBC,aAQaC;;IANV,aAAW,EAAElB,iBAAW;IACxBmB,OAAO,EAAEvB,mBAAU;IACnB,UAAQ,EAAEI,aAAO;IAClBN,GAAG,EAAC","names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","ref","onSubmit","$options","_hoisted_2","name","id","$data","placeholder","required","_hoisted_3","_createVNode","_component_network_graph","_hoisted_4","_Fragment","item","index","key","searchword","imagename","created_date","category","keywords","length","_createBlock","_component_pagination","records"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input\r\n          type=\"text\"\r\n          name=\"searchword\"\r\n          id=\"searchword\"\r\n          v-model=\"searchword\"\r\n          placeholder=\"Searchword\"\r\n          required\r\n        />\r\n        <label>\r\n          <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\" />\r\n          Category\r\n        </label>\r\n        <label>\r\n          <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n          Keyword\r\n        </label>\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n      <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\" />\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Search Word</th>\r\n            <th>Image Name</th>\r\n            <th>Created Date</th>\r\n            <th>Category</th>\r\n            <th>Keywords</th>\r\n          </tr>\r\n        </thead>\r\n  \r\n        <tbody>\r\n          <tr v-for=\"(item, index) in paginatedData\" :key=\"index\">\r\n            <td>{{ item.searchword }}</td>\r\n            <td>{{ item.imagename }}</td>\r\n            <td>{{ item.created_date }}</td>\r\n            <td>{{ item.category }}</td>\r\n            <td>{{ item.keywords }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <pagination\r\n        v-if=\"resTable.length > 0\"\r\n        :model-value=\"currentPage\"\r\n        :records=\"totalPages\"\r\n        :per-page=\"perPage\"\r\n        ref=\"pagination\"\r\n      >\r\n      \r\n      </pagination>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\n  import NetworkGraph from \"../components/NetworkGraphView.vue\";\r\n  import Pagination from \"v-pagination-3\";\r\n  \r\n  export default {\r\n    name: \"searchWord\",\r\n    components: {\r\n      NetworkGraph,\r\n      Pagination,\r\n    },\r\n    data() {\r\n      return {\r\n        response: \"\",\r\n        category: false,\r\n        keyword: false,\r\n        searchword: \"\",\r\n        resTable: [],\r\n        nodeList: {},\r\n        edgeList: {},\r\n        currentPage: 1,\r\n        perPage: 5,\r\n      };\r\n    },\r\n    computed: {\r\n      paginatedData() {\r\n        const start = (this.currentPage - 1) * this.perPage;\r\n        const end = start + this.perPage;\r\n        return this.resTable.slice(start, end);\r\n      },\r\n      totalPages() {\r\n        return Math.ceil(this.resTable.length);\r\n      },\r\n      pageNumbers() {\r\n        const totalPages = Math.ceil(this.totalRecords / this.perPage);\r\n        const pages = [];\r\n        for (let i = 1; i <= totalPages; i++) {\r\n            pages.push(i);\r\n        }\r\n        return pages;\r\n      },\r\n    },\r\n    methods: {\r\n      async submitForm() {\r\n        var res = [];\r\n        this.nodeList = {};\r\n        this.edgeList = {};\r\n        this.resTable = [];\r\n        await axios\r\n          .post(\"api/searchGraphKeyword\", {\r\n            searchword: this.searchword,\r\n            category: this.category,\r\n            keyword: this.keyword,\r\n          })\r\n          .then((response) => {\r\n            if (response.status == 200) {\r\n              res = response.data; //copy list of records from backend to global variable\r\n              \r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n        // Reset form fields\r\n        this.searchword = \"\";\r\n        this.category = false;\r\n        this.keyword = false;\r\n        this.currentPage = 1;\r\n        for(let i=0;i<res.length;i++){\r\n            res[i]['category']=res[i].category.join()\r\n            res[i]['keywords']= res[i].keywords.join()\r\n        }\r\n        this.resTable = this.resTable.concat(res);\r\n      },\r\n      changePage(pageNumber) {\r\n      this.$emit(\"page-changed\", pageNumber);\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}