{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport NetworkGraph from '../components/NetworkGraphView.vue';\nimport Pagination from 'vue-pagination-2';\nexport default {\n  name: 'searchWord',\n  components: {\n    NetworkGraph,\n    Pagination\n  },\n  data() {\n    return {\n      response: '',\n      category: false,\n      keyword: false,\n      searchword: '',\n      resTable: [],\n      nodeList: {},\n      edgeList: {},\n      page: 1,\n      perPage: 20,\n      records: [],\n      recordsLength: 0\n    };\n  },\n  methods: {\n    async submitForm() {\n      var res = [];\n      this.nodeList = {};\n      this.edgeList = {};\n      this.resTable = [];\n      await axios.post('api/searchGraphKeyword', {\n        searchword: this.searchword,\n        category: this.category,\n        keyword: this.keyword\n      }).then(function (response) {\n        if (response.status == 200) {\n          res = response.data; //copy list of records from backend to global variable\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      // Reset form fields\n      this.searchword = '';\n      this.category = false;\n      this.keyword = false;\n      this.$refs.form.reset();\n      // clear the input values for the form data fields\n      for (let i = 0; i < res.length; i++) {\n        let category = res[i].category.join();\n        let keyword = res[i].keyword.join();\n        this.resTable.push({\n          searchword: res[i].searchword,\n          imagename: res[i].imagename,\n          created_date: res[i].created_date,\n          category: category,\n          keywords: keyword\n        });\n        console.log(this.resTable);\n        //res[i].category=category\n      }\n      //this.resTable=this.resTable.concat(res)\n      console.log(this.resTable);\n      const nodes = {};\n      const edges = {};\n      this.resTable.forEach((item, index) => {\n        // Create a new node if it doesn't already exist\n        if (!nodes[item.imagename]) {\n          nodes[item.imagename] = {\n            name: item.imagename,\n            type: \"image\",\n            color: \"#ff0000\"\n          };\n        }\n        if (!nodes[item.searchword]) {\n          nodes[item.searchword] = {\n            name: item.searchword,\n            type: \"linkword\",\n            color: \"#4466cc\"\n          };\n        }\n\n        // Create a new edge if it doesn't already exist\n        const source = item.searchword;\n        const target = item.imagename;\n        const edgeId = `edge${index + 1}`;\n        if (!edges[edgeId]) {\n          edges[edgeId] = {\n            source,\n            target\n          };\n        }\n      });\n\n      // Update state with new node and edge lists\n      this.nodeList = nodes;\n      this.edgeList = edges;\n    },\n    getPage: function (page) {\n      // we simulate an api call that fetch the records from a backend\n      this.records = [];\n      const startIndex = this.perPage * (page - 1) + 1;\n      const endIndex = startIndex + this.perPage - 1;\n      for (let i = startIndex; i <= endIndex; i++) {\n        this.records.push(this.resTable[i]);\n      }\n      console.log(this.records);\n    },\n    getRecordsLength() {\n      // here we simulate an api call that returns the records length\n      this.recordsLength = this.resTable.length;\n      console.log(this.recordsLength);\n    }\n  },\n  created() {\n    this.getRecordsLength();\n    this.getPage(this.page);\n  }\n};","map":{"version":3,"mappings":"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","names":["axios","NetworkGraph","Pagination","name","components","data","response","category","keyword","searchword","resTable","nodeList","edgeList","page","perPage","records","recordsLength","methods","submitForm","res","post","then","status","catch","error","console","log","$refs","form","reset","i","length","join","push","imagename","created_date","keywords","nodes","edges","forEach","item","index","type","color","source","target","edgeId","getPage","startIndex","endIndex","getRecordsLength","created"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input type=\"text\" name=\"searchword\" id = \"searchword\" v-model=\"searchword\" placeholder=\"Searchword\" required/>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\"/>\r\n            Category\r\n        </label>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n            Keyword\r\n        </label>\r\n        <button type =\"submit\">Search</button>\r\n        </form>\r\n        <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\"/>\r\n        <table>\r\n        <thead>\r\n            <tr>\r\n                <th>Search Word</th>\r\n                <th>Image Name</th>\r\n                <th>Created Date</th>\r\n                <th>Category</th>\r\n                <th>Keywords</th>\r\n            </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n            <tr v-for=\"(item, index) in resTable\" :key=\"index\">\r\n                <td>{{ item.searchword }}</td>    \r\n                <td>{{ item.imagename }}</td>\r\n                <td>{{ item.created_date }}</td>\r\n                <td>{{ item.category }}</td>\r\n                <td>{{ item.keywords }}</td>\r\n            </tr>\r\n        </tbody>\r\n        </table>\r\n        <div v-if=\"this.recordsLength\">\r\n        <p>Selected page: {{page}}</p>\r\n        <ul>\r\n            <li v-for=\"(record, index) of records\" :key=\"index\">{{record}}</li>\r\n        </ul>\r\n        <pagination :records=\"recordsLength\" v-model=\"page\" :per-page=\"perPage\" @paginate=\"getPage\">\r\n        </pagination>\r\n    </div>\r\n    </div>\r\n</template>\r\n<style>\r\n    #app {\r\n        text-align: center;\r\n    }\r\n\r\n    [v-cloak] {\r\n        display: none;\r\n    }\r\n</style>\r\n<script>\r\nimport axios from 'axios'\r\nimport NetworkGraph from '../components/NetworkGraphView.vue'\r\nimport Pagination from 'vue-pagination-2';\r\nexport default{\r\n    name: 'searchWord',\r\n    components: {\r\n        NetworkGraph,\r\n        Pagination\r\n    },\r\n    data() {\r\n        return{\r\n            response: '',\r\n            category: false,\r\n            keyword: false,\r\n            searchword: '',\r\n            resTable: [],\r\n            nodeList: {},\r\n            edgeList: {},\r\n            page: 1,\r\n            perPage: 20,\r\n            records: [],\r\n            recordsLength: 0,\r\n        }\r\n    },\r\n    methods: {\r\n            async submitForm(){\r\n                var res=[]\r\n                this.nodeList={}\r\n                this.edgeList={}\r\n                this.resTable=[]\r\n                await axios.post('api/searchGraphKeyword',{\r\n                    searchword: this.searchword,\r\n                    category:this.category,\r\n                    keyword: this.keyword\r\n                })\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                    res=response.data; //copy list of records from backend to global variable\r\n                    }\r\n                })\r\n                .catch(error =>{\r\n                    console.log(error);\r\n                })  \r\n                // Reset form fields\r\n                this.searchword = '';\r\n                this.category = false;\r\n                this.keyword = false;\r\n                this.$refs.form.reset();\r\n                // clear the input values for the form data fields\r\n                for(let i=0;i<res.length;i++){\r\n                    let category= res[i].category.join()\r\n                    let keyword= res[i].keyword.join()\r\n                    this.resTable.push({searchword:res[i].searchword, imagename:res[i].imagename, created_date:res[i].created_date, category:category, keywords:keyword})\r\n                    console.log(this.resTable)\r\n                    //res[i].category=category\r\n                }\r\n                //this.resTable=this.resTable.concat(res)\r\n                console.log(this.resTable)\r\n                const nodes = {};\r\n                const edges = {};\r\n\r\n                this.resTable.forEach((item, index) => {\r\n                // Create a new node if it doesn't already exist\r\n                if (!nodes[item.imagename]) {\r\n                    nodes[item.imagename] = { name: item.imagename, type: \"image\", color:\"#ff0000\" };\r\n                }\r\n                \r\n                if (!nodes[item.searchword]) {\r\n                    nodes[item.searchword] = { name: item.searchword, type: \"linkword\", color: \"#4466cc\" };\r\n                }\r\n\r\n                // Create a new edge if it doesn't already exist\r\n                const source = item.searchword;\r\n                const target = item.imagename;\r\n                const edgeId = `edge${index + 1}`;\r\n\r\n                if (!edges[edgeId]) {\r\n                    edges[edgeId] = { source, target };\r\n                }\r\n                });\r\n\r\n                // Update state with new node and edge lists\r\n                this.nodeList = nodes;\r\n                this.edgeList = edges;\r\n            },\r\n            getPage: function(page) {\r\n                // we simulate an api call that fetch the records from a backend\r\n                this.records = [];\r\n                const startIndex = this.perPage * (page - 1) + 1;\r\n                const endIndex = startIndex + this.perPage - 1;\r\n                for (let i = startIndex; i <= endIndex; i++) {\r\n                    this.records.push(this.resTable[i]);\r\n                }\r\n                console.log(this.records)\r\n            },\r\n            getRecordsLength() {\r\n                // here we simulate an api call that returns the records length\r\n                this.recordsLength = this.resTable.length;\r\n                console.log(this.recordsLength)\r\n            }\r\n        },\r\n        created() {\r\n            this.getRecordsLength();\r\n            this.getPage(this.page);\r\n        }\r\n}\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}