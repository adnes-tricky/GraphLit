{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelCheckbox as _vModelCheckbox, createTextVNode as _createTextVNode, withModifiers as _withModifiers, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Search\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Search\", -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Search Word\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Image Name\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Created Date\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Category\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Keywords\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_network_graph = _resolveComponent(\"network-graph\");\n  const _component_vue_paginate = _resolveComponent(\"vue-paginate\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"form\", {\n    ref: \"form\",\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.submitForm && $options.submitForm(...args), [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    name: \"searchword\",\n    id: \"searchword\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchword = $event),\n    placeholder: \"Searchword\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchword]]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"category\",\n    id: \"category\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.category = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.category]]), _createTextVNode(\" Category \")]), _createElementVNode(\"label\", null, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    name: \"keyword\",\n    id: \"keyword\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.keyword = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, $data.keyword]]), _createTextVNode(\" Keyword \")]), _hoisted_3], 544 /* HYDRATE_EVENTS, NEED_PATCH */), _createVNode(_component_network_graph, {\n    \"node-list\": $data.nodeList,\n    \"edge-list\": $data.edgeList\n  }, null, 8 /* PROPS */, [\"node-list\", \"edge-list\"]), _createElementVNode(\"div\", null, [_createElementVNode(\"table\", null, [_hoisted_4, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.paginatedData, (item, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.searchword), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.imagename), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.created_date), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.category), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.keywords), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]), _createVNode(_component_vue_paginate, {\n    \"page-count\": $options.pageCount,\n    \"margin-pages\": 2,\n    \"prev-text\": 'Previous',\n    \"next-text\": 'Next',\n    \"click-handler\": $options.paginate,\n    \"container-class\": 'pagination'\n  }, null, 8 /* PROPS */, [\"page-count\", \"click-handler\"])])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAQ;gCAEfC,oBAAe,YAAX,QAAM;gCAUVA,oBAAsC;EAA9BC,IAAI,EAAE;AAAQ,GAAC,QAAM;gCAMrBD,oBAQQ,6BAPRA,oBAMK,0BALDA,oBAAoB,YAAhB,aAAW,gBACfA,oBAAmB,YAAf,YAAU,gBACdA,oBAAqB,YAAjB,cAAY,gBAChBA,oBAAiB,YAAb,UAAQ,gBACZA,oBAAiB,YAAb,UAAQ;;;;;uBAxB5BE,oBA8CM,OA9CNC,UA8CM,GA7CJH,oBAYS;IAZHI,GAAG,EAAC,MAAM;IAAEC,QAAM,wDAAUC,mDAAU;MAC1CC,UAAe,kBACfP,oBAA+G;IAAxGC,IAAI,EAAC,MAAM;IAACO,IAAI,EAAC,YAAY;IAACC,EAAE,EAAG,YAAY;+DAAUC,gBAAU;IAAEC,WAAW,EAAC,YAAY;IAACC,QAAQ,EAAR;iDAArCF,gBAAU,KAC1EV,oBAGQ,gCAFJA,oBAAyE;IAAlEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;+DAAUC,cAAQ;qDAARA,cAAQ,sBAAG,YAE7E,KACAV,oBAGQ,gCAFJA,oBAAuE;IAAhEC,IAAI,EAAC,UAAU;IAACO,IAAI,EAAC,SAAS;IAACC,EAAE,EAAC,SAAS;+DAAUC,aAAO;qDAAPA,aAAO,sBAAI,WAE3E,KACAG,UAAsC,0CAEtCC,aAA4DC;IAA5C,WAAS,EAAEL,cAAQ;IAAG,WAAS,EAAEA;uDAEjDV,oBA6BM,cA5BFA,oBAmBQ,gBAlBJgB,UAQQ,EACRhB,oBAQQ,mCAPRE,oBAMKe,6BANuBC,kBAAa,GAA7BC,IAAI,EAAEC,KAAK;yBAAvBlB,oBAMK;MANuCmB,GAAG,EAAED;IAAK,IAClDpB,oBAA8B,6BAAvBmB,IAAI,CAACG,UAAU,kBACtBtB,oBAA6B,6BAAtBmB,IAAI,CAACI,SAAS,kBACrBvB,oBAAgC,6BAAzBmB,IAAI,CAACK,YAAY,kBACxBxB,oBAA4B,6BAArBmB,IAAI,CAACM,QAAQ,kBACpBzB,oBAA4B,6BAArBmB,IAAI,CAACO,QAAQ;sCAI5BZ,aAOEa;IANG,YAAU,EAAErB,kBAAS;IACrB,cAAY,EAAE,CAAC;IACf,WAAS,EAAE,UAAU;IACrB,WAAS,EAAE,MAAM;IACjB,eAAa,EAAEA,iBAAQ;IACvB,iBAAe,EAAE","names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","ref","onSubmit","$options","_hoisted_2","name","id","$data","placeholder","required","_hoisted_3","_createVNode","_component_network_graph","_hoisted_4","_Fragment","_ctx","item","index","key","searchword","imagename","created_date","category","keywords","_component_vue_paginate"],"sourceRoot":"","sources":["D:\\5th sem\\Projects\\node_se_6\\client\\src\\views\\SearchGraphView.vue"],"sourcesContent":["<template>\r\n    <div class=\"search\">\r\n      <form ref=\"form\" @submit.prevent=\"submitForm\">\r\n        <h1>Search</h1>\r\n        <input type=\"text\" name=\"searchword\" id = \"searchword\" v-model=\"searchword\" placeholder=\"Searchword\" required/>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"category\" id=\"category\" v-model=\"category\"/>\r\n            Category\r\n        </label>\r\n        <label>\r\n            <input type=\"checkbox\" name=\"keyword\" id=\"keyword\" v-model=\"keyword\" />\r\n            Keyword\r\n        </label>\r\n        <button type =\"submit\">Search</button>\r\n        </form>\r\n        <network-graph :node-list=\"nodeList\" :edge-list=\"edgeList\"/>\r\n\r\n        <div>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Search Word</th>\r\n                    <th>Image Name</th>\r\n                    <th>Created Date</th>\r\n                    <th>Category</th>\r\n                    <th>Keywords</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr v-for=\"(item, index) in paginatedData\" :key=\"index\">\r\n                    <td>{{ item.searchword }}</td>\r\n                    <td>{{ item.imagename }}</td>\r\n                    <td>{{ item.created_date }}</td>\r\n                    <td>{{ item.category }}</td>\r\n                    <td>{{ item.keywords }}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <vue-paginate\r\n                :page-count=\"pageCount\"\r\n                :margin-pages=\"2\"\r\n                :prev-text=\"'Previous'\"\r\n                :next-text=\"'Next'\"\r\n                :click-handler=\"paginate\"\r\n                :container-class=\"'pagination'\"\r\n            />\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios'\r\nimport NetworkGraph from '../components/NetworkGraphView.vue'\r\nimport VuePaginate from 'vuejs-paginate';\r\n\r\nexport default{\r\n    name: 'searchWord',\r\n    components: {\r\n        NetworkGraph\r\n    },\r\n    data() {\r\n        return{\r\n            response: '',\r\n            category: false,\r\n            keyword: false,\r\n            searchword: '',\r\n            resTable: [],\r\n            nodeList: {},\r\n            edgeList: {},\r\n            items: [], // array of items to paginate\r\n            pageSize: 10, // number of items to display per page\r\n            currentPage: 1, // current page number\r\n        }\r\n    },\r\n    computed: {\r\n            pageCount() {\r\n                return Math.ceil(this.resTable.length / this.pageSize);\r\n            },\r\n    },\r\n    methods: {\r\n            paginate(pageNumber) {\r\n                this.currentPage = pageNumber;\r\n            },\r\n            async submitForm(){\r\n                var res=[]\r\n                this.nodeList={}\r\n                this.edgeList={}\r\n                this.resTable=[]\r\n                await axios.post('api/searchGraphKeyword',{\r\n                    searchword: this.searchword,\r\n                    category:this.category,\r\n                    keyword: this.keyword\r\n                })\r\n                .then(function(response){\r\n                    if(response.status==200){\r\n                    res=response.data; //copy list of records from backend to global variable\r\n                    }\r\n                })\r\n                .catch(error =>{\r\n                    console.log(error);\r\n                })  \r\n                // Reset form fields\r\n                this.searchword = '';\r\n                this.category = false;\r\n                this.keyword = false;\r\n                this.$refs.form.reset();\r\n                // clear the input values for the form data fields\r\n                console.log(res)\r\n                this.resTable=this.resTable.concat(res)\r\n                \r\n                const nodes = {};\r\n                const edges = {};\r\n\r\n                this.resTable.forEach((item, index) => {\r\n                // Create a new node if it doesn't already exist\r\n                if (!nodes[item.imagename]) {\r\n                    nodes[item.imagename] = { name: item.imagename, type: \"image\", color:\"#ff0000\" };\r\n                }\r\n                \r\n                if (!nodes[item.searchword]) {\r\n                    nodes[item.searchword] = { name: item.searchword, type: \"linkword\", color: \"#4466cc\" };\r\n                }\r\n\r\n                // Create a new edge if it doesn't already exist\r\n                const source = item.searchword;\r\n                const target = item.imagename;\r\n                const edgeId = `edge${index + 1}`;\r\n\r\n                if (!edges[edgeId]) {\r\n                    edges[edgeId] = { source, target };\r\n                }\r\n                });\r\n\r\n                // Update state with new node and edge lists\r\n                this.nodeList = nodes;\r\n                this.edgeList = edges;\r\n            }\r\n        }\r\n}\r\n</script>\r\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}