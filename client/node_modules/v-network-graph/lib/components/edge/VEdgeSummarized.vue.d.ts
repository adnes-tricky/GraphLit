import type { EdgeStates } from '../../models/edge';
import type { Edge } from '../../common/types';
import type { EdgeConfig, LabelStyle, ShapeStyle, StrokeStyle } from '../../common/configs';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{
    edges: {
        type: null;
        required: true;
    };
    layouts: {
        type: null;
        required: true;
    };
}, {
    props: any;
    config: EdgeConfig<Edge>;
    handleEdgesPointerDownEvent: (edges: string[], event: PointerEvent) => void;
    handleEdgesPointerOverEvent: (edges: string[], event: PointerEvent) => void;
    handleEdgesPointerOutEvent: (edges: string[], event: PointerEvent) => void;
    handleEdgesClickEvent: (edges: string[], event: MouseEvent) => void;
    handleEdgesDoubleClickEvent: (edges: string[], event: MouseEvent) => void;
    handleEdgesContextMenu: (edges: string[], event: MouseEvent) => void;
    edgeStates: EdgeStates;
    pos: Ref<{
        p1: {
            x: number;
            y: number;
        };
        p2: {
            x: number;
            y: number;
        };
    }>;
    centerPos: Ref<{
        x: number;
        y: number;
    }>;
    edgeIds: ComputedRef<string[]>;
    labelConfig: ComputedRef<LabelStyle>;
    shapeConfig: ComputedRef<ShapeStyle>;
    strokeConfig: ComputedRef<StrokeStyle>;
    hovered: ComputedRef<boolean>;
    selectable: ComputedRef<boolean>;
    selected: ComputedRef<boolean>;
    VLine: DefineComponent<{
        p1: {
            type: null;
            required: true;
        };
        p2: {
            type: null;
            required: true;
        };
        config: {
            type: null;
            required: true;
        };
    }, {
        props: any;
        scale: Ref<number>;
        strokeWidth: ComputedRef<number>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        p1: {
            type: null;
            required: true;
        };
        p2: {
            type: null;
            required: true;
        };
        config: {
            type: null;
            required: true;
        };
    }>>, {}>;
    VShape: DefineComponent<{
        baseX: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        config: {
            type: null;
            required: true;
        };
    }, {
        props: any;
        scale: Ref<number>;
        x: Ref<number>;
        y: Ref<number>;
        strokeWidth: Ref<number>;
        strokeColor: Ref<string>;
        strokeDasharray: Ref<string | number | undefined>;
        radius: Ref<number>;
        width: Ref<number>;
        height: Ref<number>;
        borderRadius: Ref<number>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        baseX: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        config: {
            type: null;
            required: true;
        };
    }>>, {
        baseX: number;
        baseY: number;
    }>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        y: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: null;
            required: true;
        };
    }, {
        props: any;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        y: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: null;
            required: true;
        };
    }>>, {
        x: number;
        y: number;
        dominantBaseline: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    edges: {
        type: null;
        required: true;
    };
    layouts: {
        type: null;
        required: true;
    };
}>>, {}>;
export default _sfc_main;
