import type { DefineComponent, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, Ref } from 'vue';
import { EdgeLabelStyle } from '../../common/configs';
declare const _sfc_main: DefineComponent<{
    area: {
        type: null;
        required: true;
    };
    config: {
        type: null;
        required: true;
    };
    text: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    align: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    verticalAlign: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    edge: {
        type: null;
        required: false;
        default: undefined;
    };
    hovered: {
        type: BooleanConstructor;
        required: false;
        default: undefined;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: undefined;
    };
    scale: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}, {
    props: any;
    x: Ref<number>;
    y: Ref<number>;
    textAnchor: Ref<"middle" | "start" | "end">;
    dominantBaseline: Ref<"central" | "text-top" | "hanging">;
    angle: Ref<number>;
    updatedConfig: ComputedRef<EdgeLabelStyle>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        y: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: null;
            required: true;
        };
    }, {
        props: any;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        y: {
            type: NumberConstructor;
            required: false;
            default: number;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: null;
            required: true;
        };
    }>>, {
        x: number;
        y: number;
        dominantBaseline: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    area: {
        type: null;
        required: true;
    };
    config: {
        type: null;
        required: true;
    };
    text: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    align: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    verticalAlign: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    edge: {
        type: null;
        required: false;
        default: undefined;
    };
    hovered: {
        type: BooleanConstructor;
        required: false;
        default: undefined;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: undefined;
    };
    scale: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}>>, {
    text: string;
    scale: number;
    edge: any;
    selected: boolean;
    hovered: boolean;
    align: string;
    verticalAlign: string;
}>;
export default _sfc_main;
