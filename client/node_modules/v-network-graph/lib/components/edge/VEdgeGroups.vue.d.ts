import type { Point2D } from '../../modules/vector2d/core';
import type { Layouts, EdgeConfig, Edge, LabelStyle, ShapeStyle, StrokeStyle, LinePosition, EdgePosition, Vector2D, Point } from '../..';
import type { EdgeStates, EdgeEntry, Line } from '../../models/edge';
import type { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, WatchStopHandle } from 'vue';
import { isSummarizedEdges } from '../../composables/state';
declare const _sfc_main: DefineComponent<{
    hasEdgeOverlaySlot: {
        type: BooleanConstructor;
        required: true;
    };
}, {
    edgeStates: EdgeStates;
    edgeZOrderedList: ComputedRef<EdgeEntry[]>;
    layouts: Layouts;
    readonly isSummarizedEdges: typeof isSummarizedEdges;
    VEdge: DefineComponent<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        sourcePos: {
            type: null;
            required: false;
            default: undefined;
        };
        targetPos: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        config: EdgeConfig<Edge>;
        VLine: DefineComponent<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            strokeWidth: ComputedRef<number>;
            strokeDasharray: ComputedRef<string | number | undefined>;
            animationSpeed: ComputedRef<string | undefined>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {}>;
        VArc: DefineComponent<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            radius: {
                type: ArrayConstructor;
                required: true;
            };
            isLargeArc: {
                type: BooleanConstructor;
                required: true;
            };
            isClockwise: {
                type: BooleanConstructor;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            strokeWidth: ComputedRef<number>;
            strokeDasharray: ComputedRef<string | number | undefined>;
            animationSpeed: ComputedRef<string | undefined>;
            pathD: ComputedRef<string>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            radius: {
                type: ArrayConstructor;
                required: true;
            };
            isLargeArc: {
                type: BooleanConstructor;
                required: true;
            };
            isClockwise: {
                type: BooleanConstructor;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {}>;
        VEdgeCurved: DefineComponent<{
            state: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
            markerStart: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            markerEnd: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
        }, {
            props: any;
            scale: Ref<number>;
            pathD: ComputedRef<string>;
            strokeWidth: ComputedRef<number>;
            strokeDasharray: ComputedRef<string | number | undefined>;
            animationSpeed: ComputedRef<string | undefined>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            state: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
            markerStart: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            markerEnd: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
        }>>, {
            markerStart: string;
            markerEnd: string;
        }>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        sourcePos: {
            type: null;
            required: false;
            default: undefined;
        };
        targetPos: {
            type: null;
            required: false;
            default: undefined;
        };
    }>>, {
        sourcePos: any;
        targetPos: any;
    }>;
    VEdgeSummarized: DefineComponent<{
        edges: {
            type: null;
            required: true;
        };
        layouts: {
            type: null;
            required: true;
        };
    }, {
        props: any;
        config: EdgeConfig<Edge>;
        handleEdgesPointerDownEvent: (edges: string[], event: PointerEvent) => void;
        handleEdgesPointerOverEvent: (edges: string[], event: PointerEvent) => void;
        handleEdgesPointerOutEvent: (edges: string[], event: PointerEvent) => void;
        handleEdgesClickEvent: (edges: string[], event: MouseEvent) => void;
        handleEdgesDoubleClickEvent: (edges: string[], event: MouseEvent) => void;
        handleEdgesContextMenu: (edges: string[], event: MouseEvent) => void;
        edgeStates: EdgeStates;
        pos: Ref<{
            p1: {
                x: number;
                y: number;
            };
            p2: {
                x: number;
                y: number;
            };
        }>;
        centerPos: Ref<{
            x: number;
            y: number;
        }>;
        edgeIds: ComputedRef<string[]>;
        labelConfig: ComputedRef<LabelStyle>;
        shapeConfig: ComputedRef<ShapeStyle>;
        strokeConfig: ComputedRef<StrokeStyle>;
        hovered: ComputedRef<boolean>;
        selectable: ComputedRef<boolean>;
        selected: ComputedRef<boolean>;
        VLine: DefineComponent<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            strokeWidth: ComputedRef<number>;
            strokeDasharray: ComputedRef<string | number | undefined>;
            animationSpeed: ComputedRef<string | undefined>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            p1: {
                type: null;
                required: true;
            };
            p2: {
                type: null;
                required: true;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {}>;
        VShape: DefineComponent<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            x: Ref<number>;
            y: Ref<number>;
            strokeWidth: Ref<number>;
            strokeColor: Ref<string>;
            strokeDasharray: Ref<string | number | undefined>;
            radius: Ref<number>;
            width: Ref<number>;
            height: Ref<number>;
            borderRadius: Ref<number>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {
            baseX: number;
            baseY: number;
        }>;
        VText: DefineComponent<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            y: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            attrs: {
                [x: string]: unknown;
            };
            scale: Ref<number>;
            texts: ComputedRef<string[]>;
            fontSize: ComputedRef<number>;
            lineHeight: ComputedRef<number>;
            topDeltaY: ComputedRef<number>;
            element: Ref<SVGTextElement | undefined>;
            transform: Ref<string>;
            pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            backgroundRectPos: ComputedRef<{
                x: number;
                y: number;
                width: number;
                height: number;
            }>;
            observer: MutationObserver | undefined;
            updateObserver: () => void;
            updateBackgroundPosition: (element: SVGTextElement, pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            }, transform: Ref<string | undefined>) => void;
            enableMutationObserver: (element: SVGTextElement, pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            }, transform: Ref<string | undefined>) => MutationObserver;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            y: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {
            x: number;
            y: number;
            dominantBaseline: string;
        }>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        edges: {
            type: null;
            required: true;
        };
        layouts: {
            type: null;
            required: true;
        };
    }>>, {}>;
    VEdgeOverlay: DefineComponent<{
        edgeId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        edge: {
            type: null;
            required: false;
            default: undefined;
        };
        edges: {
            type: null;
            required: false;
            default: () => {};
        };
        state: {
            type: null;
            required: true;
        };
        isSummarized: {
            type: BooleanConstructor;
            required: true;
        };
    }, {
        props: any;
        svg: Ref<SVGElement>;
        scale: Ref<number>;
        edgeConfig: EdgeConfig<Edge>;
        getStrokeConfig: () => StrokeStyle;
        toEdgePosition: (line: LinePosition) => EdgePosition;
        calculateCenterPoint: (state: {
            id: string;
            line: Line;
            selectable: number | boolean;
            selected: boolean;
            hovered: boolean;
            origin: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            labelPosition: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            position: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            curve?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                theta: number;
                circle: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    radius: number;
                };
                control: {
                    x: number;
                    y: number;
                }[];
            } | undefined;
            loop?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                radius: [number, number];
                isLargeArc: boolean;
                isClockwise: boolean;
            } | undefined;
            sourceMarkerId?: string | undefined;
            targetMarkerId?: string | undefined;
            zIndex: number;
            stopWatchHandle: WatchStopHandle;
        }) => Point;
        getPathTotalLength: () => number;
        calculatePointAtLength: (distance: number) => Point;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        edgeId: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        edge: {
            type: null;
            required: false;
            default: undefined;
        };
        edges: {
            type: null;
            required: false;
            default: () => {};
        };
        state: {
            type: null;
            required: true;
        };
        isSummarized: {
            type: BooleanConstructor;
            required: true;
        };
    }>>, {
        edges: any;
        edge: any;
        edgeId: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    hasEdgeOverlaySlot: {
        type: BooleanConstructor;
        required: true;
    };
}>>, {}>;
export default _sfc_main;
