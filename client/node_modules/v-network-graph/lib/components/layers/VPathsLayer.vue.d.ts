import type { EdgeStates } from '../../models/edge';
import type { NodeStates } from '../../models/node';
import type { PathConfig, Path, Layouts, PositionOrCurve, PathStrokeStyle } from '../..';
import type { EdgeObject } from '../../models/path';
import type { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{}, {
    VPaths: DefineComponent<{}, {
        pathZOrderedList: ComputedRef<{
            id: string;
            selected: boolean;
            hovered: boolean;
            selectable: number | boolean;
            zIndex: number;
            clickable: boolean;
            hoverable: boolean;
            path: {
                [x: string]: any;
                id?: string | undefined;
                edges: string[];
            };
            edges: EdgeObject[];
        }[]>;
        pathConfig: PathConfig<Path>;
        handlePathPointerDownEvent: (path: string, event: PointerEvent) => void;
        handlePathPointerOverEvent: (path: string, event: PointerEvent) => void;
        handlePathPointerOutEvent: (path: string, event: PointerEvent) => void;
        handlePathClickEvent: (path: string, event: MouseEvent) => void;
        handlePathDoubleClickEvent: (path: string, event: MouseEvent) => void;
        handlePathContextMenu: (path: string, event: MouseEvent) => void;
        VPath: DefineComponent<{
            path: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            nodeStates: NodeStates;
            edgeStates: EdgeStates;
            layouts: Layouts;
            scale: Ref<number>;
            pathConfig: PathConfig<Path>;
            calcPathPoints: (path: {
                id: string;
                selected: boolean;
                hovered: boolean;
                selectable: number | boolean;
                zIndex: number;
                clickable: boolean;
                hoverable: boolean;
                path: {
                    [x: string]: any;
                    id?: string | undefined;
                    edges: string[];
                };
                edges: EdgeObject[];
            }) => PositionOrCurve[];
            calcPathD: (path: {
                id: string;
                selected: boolean;
                hovered: boolean;
                selectable: number | boolean;
                zIndex: number;
                clickable: boolean;
                hoverable: boolean;
                path: {
                    [x: string]: any;
                    id?: string | undefined;
                    edges: string[];
                };
                edges: EdgeObject[];
            }) => string;
            config: ComputedRef<PathStrokeStyle>;
            strokeDasharray: ComputedRef<string | number | undefined>;
            animationSpeed: ComputedRef<string | undefined>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            path: {
                type: null;
                required: true;
            };
        }>>, {}>;
    }, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
