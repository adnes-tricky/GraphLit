import type { Layouts, NodeConfig, Node, ShapeType } from '../..';
import type { Reactive } from '../../common/common';
import type { NodeStates } from '../../models/node';
import type { DefineComponent, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{}, {
    nodeStates: NodeStates;
    selectedNodes: Reactive<Set<string>>;
    layouts: Layouts;
    VNodeFocusRing: DefineComponent<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: true;
            default: undefined;
        };
    }, {
        props: any;
        x: ComputedRef<number>;
        y: ComputedRef<number>;
        config: NodeConfig<Node>;
        shapeConfig: {
            type: ShapeType;
            radius: number;
            strokeWidth: number;
            strokeColor?: string | undefined;
            strokeDasharray?: string | number | undefined;
            color: string;
            width: number;
            height: number;
            borderRadius: number;
        };
        VShape: DefineComponent<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            x: Ref<number>;
            y: Ref<number>;
            strokeWidth: Ref<number>;
            strokeColor: Ref<string>;
            strokeDasharray: Ref<string | number | undefined>;
            radius: Ref<number>;
            width: Ref<number>;
            height: Ref<number>;
            borderRadius: Ref<number>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {
            baseX: number;
            baseY: number;
        }>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: true;
            default: undefined;
        };
    }>>, {
        pos: any;
    }>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
