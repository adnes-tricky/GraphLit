import type { ShapeStyle, NodeLabelStyle, OppositeNode, NodeConfig, Node, Layouts } from '../..';
import type { DefineComponent, Slot, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
declare const _sfc_main: DefineComponent<{}, {
    slots: Readonly<{
        [name: string]: Slot | undefined;
    }>;
    hasOverrideNodeSlot: ComputedRef<boolean>;
    nodeZOrderedList: ComputedRef<{
        id: string;
        shape: ShapeStyle;
        staticShape: ShapeStyle;
        label: NodeLabelStyle;
        labelText: string;
        selected: boolean;
        hovered: boolean;
        draggable: boolean;
        selectable: number | boolean;
        zIndex: number;
        oppositeNodeIds: Record<string, string>;
        oppositeNodes: Record<string, OppositeNode>;
    }[]>;
    configs: NodeConfig<Node>;
    layouts: Layouts;
    VNode: DefineComponent<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: any;
        x: ComputedRef<number>;
        y: ComputedRef<number>;
        scale: Ref<number>;
        handleNodePointerDownEvent: (node: string, event: PointerEvent) => void;
        handleNodePointerOverEvent: (node: string, event: PointerEvent) => void;
        handleNodePointerOutEvent: (node: string, event: PointerEvent) => void;
        handleNodeClickEvent: (node: string, event: MouseEvent) => void;
        handleNodeDoubleClickEvent: (node: string, event: MouseEvent) => void;
        handleNodeContextMenu: (node: string, event: MouseEvent) => void;
        VShape: DefineComponent<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            scale: Ref<number>;
            x: Ref<number>;
            y: Ref<number>;
            strokeWidth: Ref<number>;
            strokeColor: Ref<string>;
            strokeDasharray: Ref<string | number | undefined>;
            radius: Ref<number>;
            width: Ref<number>;
            height: Ref<number>;
            borderRadius: Ref<number>;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            baseX: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {
            baseX: number;
            baseY: number;
        }>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: false;
            default: undefined;
        };
    }>>, {
        pos: any;
    }>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
