import type { EdgeStates } from '../../models/edge';
import type { ShapeStyle, NodeLabelStyle, OppositeNode, NodeConfig, Node, Layouts, NodeLabelDirectionType } from '../..';
import type { DefineComponent, Slot, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes } from 'vue';
import { NodeState } from '../../models/node';
declare const _sfc_main: DefineComponent<{}, {
    slots: Readonly<{
        [name: string]: Slot | undefined;
    }>;
    hasOverrideNodeLabelSlot: ComputedRef<boolean>;
    nodeZOrderedList: ComputedRef<{
        id: string;
        shape: ShapeStyle;
        staticShape: ShapeStyle;
        label: NodeLabelStyle;
        labelText: string;
        selected: boolean;
        hovered: boolean;
        draggable: boolean;
        selectable: number | boolean;
        zIndex: number;
        oppositeNodeIds: Record<string, string>;
        oppositeNodes: Record<string, OppositeNode>;
    }[]>;
    configs: NodeConfig<Node>;
    layouts: Layouts;
    nodeStates: ComputedRef<{
        id: string;
        shape: ShapeStyle;
        staticShape: ShapeStyle;
        label: NodeLabelStyle;
        labelText: string;
        selected: boolean;
        hovered: boolean;
        draggable: boolean;
        selectable: number | boolean;
        zIndex: number;
        oppositeNodeIds: Record<string, string>;
        oppositeNodes: Record<string, OppositeNode>;
    }[]>;
    onlyHasDisplayLabel: (nodeZOrderedList: NodeState[]) => NodeState[];
    VNodeLabel: DefineComponent<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: false;
            default: undefined;
        };
    }, {
        props: any;
        configs: NodeConfig<Node>;
        edgeStates: EdgeStates;
        scale: Ref<number>;
        handleNodePointerDownEvent: (node: string, event: PointerEvent) => void;
        handleNodePointerOverEvent: (node: string, event: PointerEvent) => void;
        handleNodePointerOutEvent: (node: string, event: PointerEvent) => void;
        handleNodeClickEvent: (node: string, event: MouseEvent) => void;
        handleNodeDoubleClickEvent: (node: string, event: MouseEvent) => void;
        handleNodeContextMenu: (node: string, event: MouseEvent) => void;
        x: ComputedRef<number>;
        y: ComputedRef<number>;
        labelMargin: ComputedRef<number>;
        labelShiftV: Ref<number>;
        labelShiftH: Ref<number>;
        labelDiagonalShiftV: Ref<number>;
        labelDiagonalShiftH: Ref<number>;
        labelDirection: ComputedRef<NodeLabelDirectionType>;
        textAnchor: ComputedRef<"middle" | "start" | "end">;
        dominantBaseline: ComputedRef<"central" | "text-top" | "hanging">;
        labelX: ComputedRef<number>;
        labelY: ComputedRef<number>;
        eventHandlers: ComputedRef<(id: string) => {
            pointerdown: (e: PointerEvent) => void;
            pointerenter: (e: PointerEvent) => void;
            pointerleave: (e: PointerEvent) => void;
            click: (e: MouseEvent) => void;
            dblclick: (e: MouseEvent) => void;
            contextmenu: (e: MouseEvent) => void;
        } | {
            pointerdown?: undefined;
            pointerenter?: undefined;
            pointerleave?: undefined;
            click?: undefined;
            dblclick?: undefined;
            contextmenu?: undefined;
        }>;
        groupClasses: ComputedRef<{
            "v-ng-node-label": boolean;
            hover: boolean;
            selected: boolean;
        }>;
        labelClasses: ComputedRef<{
            draggable: boolean;
            selectable: number | boolean;
        }>;
        VLabelText: DefineComponent<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            y: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: null;
                required: true;
            };
        }, {
            props: any;
            attrs: {
                [x: string]: unknown;
            };
            scale: Ref<number>;
            texts: ComputedRef<string[]>;
            fontSize: ComputedRef<number>;
            lineHeight: ComputedRef<number>;
            topDeltaY: ComputedRef<number>;
            element: Ref<SVGTextElement | undefined>;
            transform: Ref<string>;
            pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            backgroundRectPos: ComputedRef<{
                x: number;
                y: number;
                width: number;
                height: number;
            }>;
            observer: MutationObserver | undefined;
            updateObserver: () => void;
            updateBackgroundPosition: (element: SVGTextElement, pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            }, transform: Ref<string | undefined>) => void;
            enableMutationObserver: (element: SVGTextElement, pos: {
                x: number;
                y: number;
                width: number;
                height: number;
            }, transform: Ref<string | undefined>) => MutationObserver;
        }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            y: {
                type: NumberConstructor;
                required: false;
                default: number;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: null;
                required: true;
            };
        }>>, {
            x: number;
            y: number;
            dominantBaseline: string;
        }>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: null;
            required: true;
        };
        pos: {
            type: null;
            required: false;
            default: undefined;
        };
    }>>, {
        pos: any;
    }>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
